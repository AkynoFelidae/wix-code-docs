{ "name": "Pagination",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ViewportMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Pagination.js" },
  "docs":
    { "summary": "An element for working with paging.",
      "description":
        [ "A pagination bar provides a way for your users to control the [paging of",
          " a dataset](wix-dataset/introduction#dataset-pages). Elements that are connected to the",
          " same dataset as the pagination bar are affected when the user",
          " interacts with the pagination bar.",
          "",
          " For example, suppose you have a repeater connected to a dataset and that dataset",
          " is set to have a page size of 5. When the page loads, the repeater shows",
          " the first 5 items from the dataset. If a user clicks on the next page button",
          " of a pagination bar connected to the same dataset as the repeater,",
          " the repeater then shows items 6-10 from the dataset.",
          "",
          " You can also use a pagination bar without connecting it to a dataset.",
          " When doing so, you have to provide the pagination logic that runs when",
          " a user interacts with the pagination bar." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentPage",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 60,
              "filename": "Pagination.js" },
            { "lineno": 87,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the current page.",
            "description":
              [ "Setting the `currentPage` property updates the visual indicator of the",
                " pagination bar to display the current page. The `currentPage` cannot be",
                " set to a value greater than [`totalPages`](#totalPages).",
                "",
                " If the pagination bar is connected to a dataset, setting `currentPage`",
                " updates the current page of the dataset and updates any relevant",
                " elements connected to that dataset.",
                "",
                " Getting the `currentPage` property returns the index of the current page.",
                " > **Note:** Page numbers begin with 1." ],
            "links":
              [ "[totalPages](#totalPages)" ],
            "examples":
              [ { "title": "Get a pagination bar's current page",
                  "body":
                    [ "let currentPage = $w(\"#myPagination\").currentPage;  // 4" ],
                  "extra":
                    {  } },
                { "title": "Set a pagination bar's current page",
                  "body":
                    [ "$w(\"#myPagination\").currentPage = 4;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "navigationType",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 213,
              "filename": "Pagination.js" },
            { "lineno": 239,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the navigation layout displayed in the pagination bar.",
            "description":
              [ "There are 3 types of navigation layouts:",
                " + `clickNumbers`: Displays the page numbers as clickable links.",
                "",
                "    ![](../assets/images/pagination-clickNumbers.png)",
                " + `inputNumbers`: Allows the site visitor to input a desired page number.",
                "",
                "    ![](../assets/images/pagination-inputNumbers.png)",
                " + `arrowsOnly`: Hides the page numbers so that only the next and previous buttons are displayed.",
                "",
                "    ![](../assets/images/pagination-arrowsOnly.png)",
                ">**Note:**",
                ">",
                ">When `navigationType` is set to `arrowsOnly`, the pagination bar's `currentPage` and `totalPages` properties return `undefined`." ],
            "links":
              [ "[nextEnabled](#nextEnabled)" ],
            "examples":
              [ { "title": "Get a pagination bar's current navigation layout",
                  "body":
                    [ "let navigationCheck = $w('#pagination1').navigationType; // 'arrowsOnly'" ],
                  "extra":
                    {  } },
                { "title": "Set a pagination bar's navigation layout",
                  "body":
                    [ "$w('#myPaginationBar').navigationType = 'arrowsOnly';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "nextEnabled",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 163,
              "filename": "Pagination.js" },
            { "lineno": 182,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets whether the pagination bar's next page button is enabled.",
            "description":
              [ "If you don't set `nextEnabled` in your code, the next page button follows the default behaviour defined by the ",
                "pagination bar. This means the button is disabled when the final page of data is displayed.",
                "",
                ">**Note**:",
                ">",
                ">Once you set the value of `nextEnabled` in your code the next page button stops following the pagination bar's defaults." ],
            "links":
              [ "[previousEnabled](#previousEnabled)" ],
            "examples":
              [ { "title": "Check if a pagination bar's next page button is enabled",
                  "body":
                    [ "let nextPageCheck = $w('#myPaginationBar').nextEnabled; // true" ],
                  "extra":
                    {  } },
                { "title": "Set the status of a pagination bar's next page button",
                  "body":
                    [ "$w('#myPaginationBar').nextEnabled = false;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previousEnabled",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 188,
              "filename": "Pagination.js" },
            { "lineno": 207,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets whether the pagination bar's previous page button is enabled.",
            "description":
              [ "If you don't set `previousEnabled` in your code, the previous page button follows the default behaviour defined by the ",
                "pagination bar. This means the button is disabled when the first page of data is displayed.",
                "",
                ">**Note**:",
                ">",
                ">Once you set the value of `previousEnabled` in your code the previous page button stops following the pagination bar's defaults." ],
            "links":
              [ "[nextEnabled](#nextEnabled)" ],
            "examples":
              [ { "title": "Check if a pagination bar's previous page button is enabled",
                  "body":
                    [ "let previousPageCheck = $w('#myPaginationBar').previousEnabled; // true" ],
                  "extra":
                    {  } },
                { "title": "Set the status of a pagination bar's previous page button",
                  "body":
                    [ "$w('#myPaginationBar').previousEnabled = false;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "totalPages",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 94,
              "filename": "Pagination.js" },
            { "lineno": 126,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the total number of pages shown in a pagination bar.",
            "description":
              [ "Setting the `totalPages` property updates the number of pages shown in",
                " the pagination bar.",
                "",
                " Setting `totalPages` to a value less than [`currentPage`](#currentPage)",
                " causes `currentPage` to be reset to the new `totalPages` value. For",
                " example, if `currentPage` is `8` and `totalPages` is set to `5`, `currentPage`",
                " is reset automatically to `5`.",
                "",
                " If the pagination bar is connected to a dataset, it is recommended that",
                " you allow the dateset to control the pagination bar's `totalPages` value.",
                "",
                " Getting the `totalPages` property returns the total number of pages available",
                " for selection in the pagination bar. If the pagination bar is",
                " connected to a dataset, the initial `totalPages` value is calculated based",
                " on the total number of items in the dataset and the dataset's page size." ],
            "links":
              [ "[currentPage](#currentPage)" ],
            "examples":
              [ { "title": "Get the number of pages available in a pagination element",
                  "body":
                    [ "let totalPages = $w(\"#myPagination\").totalPages;  // 14" ],
                  "extra":
                    {  } },
                { "title": "Set the number of pages available in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").totalPages = 14;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is ready." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 32,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the pagination bar\n is changed.",
            "description":
              [ "A pagination bar receives a `change` event when a user changes the",
                " current page by interacting with the pagination bar.",
                "",
                " A `change` event is not triggered when you change a pagination bar's",
                " current page using the [`currentPage`](#currentPage) property.",
                "",
                " When a pagination bar is connected to a dataset, changing the [dataset's",
                " current page](wix-dataset/introduction#wix-dataset_introduction_dataset-pages) using dataset functions, such",
                " as [`nextPage()`](wix-dataset.Dataset.html#nextPage), do not trigger `change`",
                " events on the pagination bar." ],
            "links": [],
            "examples":
              [ { "title": "Get the new current page of the pagination bar that was changed",
                  "body":
                    [ "$w(\"#myPagination\").onChange( (event) => {",
                      "  let newValue = event.target.currentPage;  // 4",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Change" } },
      { "name": "onNextClicked",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the next page button is clicked." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 133,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the pagination bar's next page button is clicked.",
            "description":
              [ "The `onNextClicked()` event gets triggered before the pagination bar's [`onChange()'](#onChange) event." ],
            "links":
              [ "[onPreviousClicked()](#onPreviousClicked)" ],
            "examples":
              [ { "title": "Set a pagination bar's `onNextClicked` event handler",
                  "body":
                    [ "$w('#myPaginationBar').onNextClicked(() => {",
                      "    //...",
                      "    console.log('Next button clicked');",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Change" } },
      { "name": "onPreviousClicked",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the previous page button is clicked." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 148,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the pagination bar's previous page button is clicked.",
            "description":
              [ "The `onPreviousClicked()` event gets triggered before the pagination bar's [`onChange()'](#onChange) event." ],
            "links":
              [ "[onNextClicked()](#onNextClicked)" ],
            "examples":
              [ { "title": "Set a pagination bar's `onPreviousClicked` event handler",
                  "body":
                    [ "$w('#myPaginationBar').onPreviousClicked(() => {",
                      "    //...",
                      "    console.log('Previous button clicked');",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Change" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }
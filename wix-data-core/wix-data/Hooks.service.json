{ "name": "Hooks",
  "memberOf": "wix-data",
  "mixes": [],
  "labels":
    [ "new",
      "changed" ],
  "location":
    { "filename": "hooks.es6",
      "lineno": 14 },
  "docs":
    { "summary": "Hooks that can be added to wix-data operations.",
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "Hooks that can be added to wix-data operations.",
      "links": [],
      "examples": [] },
  "properties": [],
  "operations":
    [ { "name": "afterCount",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "count",
              "type": "number",
              "doc": "The number of items the count operation has found.",
              "srcDoc": "The number of items the count operation has found." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "number" ] },
            "doc": "undefined. on fulfilled - The count to return to [`count()`](wix-data.WixDataQuery.html#count) instead of the original count.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The count to return to [`count()`](wix-data.WixDataQuery.html#count) instead of the original count.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 42 } ],
        "docs":
          { "summary": "A hook that is triggered after a `count()` operation.",
            "description":
              [ "The `afterCount()` hook returns a Promise that will be used as the result of",
                " the call to [`count()`](wix-data.WixDataQuery.html#count), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterCount(count, context) {",
                      "  let originalCount = count;  // 5",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received count",
                      "",
                      "  return newCount;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterCount(count, context) {",
                      "  let originalCount = count;  // 5",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received count",
                      "\tlet newCount = originalCount + 1;",
                      "",
                      "  return newCount;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered after a `count()` operation.",
            "description":
              [ "The `afterCount()` hook returns a Promise that will be used as the result of",
                " the call to [`count()`](wix-data.WixDataQuery.html#count), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterCount(count, context) {",
                      "  let originalCount = count;  // 5",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received count",
                      "",
                      "  return newCount;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterCount(count, context) {",
                      "  let originalCount = count;  // 5",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received count",
                      "\tlet newCount = originalCount + 1;",
                      "",
                      "  return newCount;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "afterGet",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The item that was retrieved from the collection.",
              "srcDoc": "The item that was retrieved from the collection." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The item to return to [`get()`](wix-data.html#get) instead of the retrieved item.. on rejected - returning a rejected promise will not block the operation, but will returned a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook",
            "srcDoc": "on fulfilled - The item to return to [`get()`](wix-data.html#get) instead of the retrieved item.. on rejected - returning a rejected promise will not block the operation, but will returned a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook" },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 67 } ],
        "docs":
          { "summary": "A hook that is triggered after a `get()` operation.",
            "description":
              [ "The `afterGet()` hook returns a Promise that is returned as the result of",
                " the call to [`get()`](wix-data.html#get), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterGet(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterGet(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered after a `get()` operation.",
            "description":
              [ "The `afterGet()` hook returns a Promise that is returned as the result of",
                " the call to [`get()`](wix-data.html#get), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterGet(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterGet(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "afterInsert",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The item that was inserted.",
              "srcDoc": "The item that was inserted." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The item to return to [`insert()`](wix-data.html#insert) instead of the inserted item.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The item to return to [`insert()`](wix-data.html#insert) instead of the inserted item.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 92 } ],
        "docs":
          { "summary": "A hook that is triggered after an `insert()` operation.",
            "description":
              [ "The `afterInsert()` hook returns a Promise that will be used as the result of",
                " the call to [`insert()`](wix-data.html#insert), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterInsert` hook is called after the [`insert()`](wix-data.html#insert)",
                " is executed, it cannot affect the item that is inserted into the collection.",
                " It can only affect the item returned by [`insert()`](wix-data.html#insert)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after an insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered after an `insert()` operation.",
            "description":
              [ "The `afterInsert()` hook returns a Promise that will be used as the result of",
                " the call to [`insert()`](wix-data.html#insert), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterInsert` hook is called after the [`insert()`](wix-data.html#insert)",
                " is executed, it cannot affect the item that is inserted into the collection.",
                " It can only affect the item returned by [`insert()`](wix-data.html#insert)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after an insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "afterQuery",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "One of the items of the query result. The hook is called for each item in the results.",
              "srcDoc": "One of the items of the query result. The hook is called for each item in the results." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The item to return to [`find`](wix-data.WixDataQuery.html#find) instead of the item retrieved from the database.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook",
            "srcDoc": "on fulfilled - The item to return to [`find`](wix-data.WixDataQuery.html#find) instead of the item retrieved from the database.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook" },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 121 } ],
        "docs":
          { "summary": "A hook that is triggered after a `find` operation, for each of the items in the query results.",
            "description":
              [ "The `afterQuery()` hook runs after a call to [`find`](wix-data.WixDataQuery.html#find)",
                " for each of the items found in the database. It returns a Promise that is",
                " used instead of the item retrieved from the database, whether the Promise",
                " is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a find",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterQuery(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterQuery(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered after a `find` operation, for each of the items in the query results.",
            "description":
              [ "The `afterQuery()` hook runs after a call to [`find`](wix-data.WixDataQuery.html#find)",
                " for each of the items found in the database. It returns a Promise that is",
                " used instead of the item retrieved from the database, whether the Promise",
                " is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a find",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterQuery(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterQuery(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "afterRemove",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The item that was removed.",
              "srcDoc": "The item that was removed." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The item to return to [`remove()`](wix-data.html#remove) instead of the deleted item.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The item to return to [`remove()`](wix-data.html#remove) instead of the deleted item.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 148 } ],
        "docs":
          { "summary": "A hook that is triggered after a `remove()` operation.",
            "description":
              [ "The `afterRemove()` hook returns a Promise that will be used as the result of",
                " the call to [`remove()`](wix-data.html#remove), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterRemove()` hook is called after the [`remove()`](wix-data.html#remove)",
                " is executed, it cannot prevent the item from being removed from the collection.",
                " It can only affect the item returned by [`remove()`](wix-data.html#remove)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterRemove(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the removed item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the removed item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered after a `remove()` operation.",
            "description":
              [ "The `afterRemove()` hook returns a Promise that will be used as the result of",
                " the call to [`remove()`](wix-data.html#remove), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterRemove()` hook is called after the [`remove()`](wix-data.html#remove)",
                " is executed, it cannot prevent the item from being removed from the collection.",
                " It can only affect the item returned by [`remove()`](wix-data.html#remove)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterRemove(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the removed item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the removed item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "afterUpdate",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The updated item.",
              "srcDoc": "The updated item." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The item to return to [`update()`](wix-data.html#update) instead of the updated item.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The item to return to [`update()`](wix-data.html#update) instead of the updated item.. on rejected - Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 177 } ],
        "docs":
          { "summary": "A hook that is triggered after an `update()` operation.",
            "description":
              [ "The `afterUpdate()` hook returns a Promise that will be used as the result of",
                " the call to [`update()`](wix-data.html#update), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterUpdate` hook is called after the [`update()`](wix-data.html#update)",
                " is executed, it cannot affect the item that is being updated in the collection.",
                " It can only affect the item returned by [`update()`](wix-data.html#update)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after an update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered after an `update()` operation.",
            "description":
              [ "The `afterUpdate()` hook returns a Promise that will be used as the result of",
                " the call to [`update()`](wix-data.html#update), whether the",
                " Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterUpdate` hook is called after the [`update()`](wix-data.html#update)",
                " is executed, it cannot affect the item that is being updated in the collection.",
                " It can only affect the item returned by [`update()`](wix-data.html#update)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after an update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "\titem.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "beforeCount",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "The original query as defined by [`count()`](wix-data.WixDataQuery.html#count).",
              "srcDoc": "The original query as defined by [`count()`](wix-data.WixDataQuery.html#count)." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataQuery" ] },
            "doc": "undefined. on fulfilled - The `query` to be used for the [`count()`](wix-data.WixDataQuery.html#count) operation instead of the original query.. on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The `query` to be used for the [`count()`](wix-data.WixDataQuery.html#count) operation instead of the original query.. on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 206 } ],
        "docs":
          { "summary": "A hook that is triggered before a `count()` operation.",
            "description":
              [ "The `beforeCount()` hook returns a Promise that will be used as the query",
                " for the [`count()`](wix-data.WixDataQuery.html#count) operation.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`count()`](wix-data.WixDataQuery.html#count)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeCount()` hook is called before [`count()`](wix-data.WixDataQuery.html#count)",
                " is executed it can affect how items are counted",
                " or block the [`count()`](wix-data.WixDataQuery.html#count)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeCount(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeCount(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "\tlet newQuery = query.eq(\"status\", \"active\");",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered before a `count()` operation.",
            "description":
              [ "The `beforeCount()` hook returns a Promise that will be used as the query",
                " for the [`count()`](wix-data.WixDataQuery.html#count) operation.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`count()`](wix-data.WixDataQuery.html#count)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeCount()` hook is called before [`count()`](wix-data.WixDataQuery.html#count)",
                " is executed it can affect how items are counted",
                " or block the [`count()`](wix-data.WixDataQuery.html#count)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeCount(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeCount(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "\tlet newQuery = query.eq(\"status\", \"active\");",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "beforeGet",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "itemId",
              "type": "string",
              "doc": "The ID of the original item to be retrieved.",
              "srcDoc": "The ID of the original item to be retrieved." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "undefined. on fulfilled - The ID to be used for the [`get()`](wix-data.html#get) operation instead of the original `itemId` specified by the caller.. on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The ID to be used for the [`get()`](wix-data.html#get) operation instead of the original `itemId` specified by the caller.. on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 234 } ],
        "docs":
          { "summary": "A hook that is triggered before a `get()` operation.",
            "description":
              [ "The `beforeGet()` hook returns a Promise that will be used as the `itemId` parameter",
                " for the [`get()`](wix-data.html#get) operation.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`get()`](wix-data.html#get)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeGet()` hook is called before [`get()`](wix-data.html#get)",
                " is executed it can affect which item is retrieved",
                " or block the [`get()`](wix-data.html#get)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeGet(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change the item to get",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the item to get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeGet(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change the item to get",
                      "\tlet newItemId = \"1234\";",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered before a `get()` operation.",
            "description":
              [ "The `beforeGet()` hook returns a Promise that will be used as the `itemId` parameter",
                " for the [`get()`](wix-data.html#get) operation.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`get()`](wix-data.html#get)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeGet()` hook is called before [`get()`](wix-data.html#get)",
                " is executed it can affect which item is retrieved",
                " or block the [`get()`](wix-data.html#get)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeGet(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change the item to get",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the item to get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeGet(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change the item to get",
                      "\tlet newItemId = \"1234\";",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "beforeInsert",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The original item to be inserted.",
              "srcDoc": "The original item to be inserted." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The item to be inserted instead of the original item specified by the caller.. on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The item to be inserted instead of the original item specified by the caller.. on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 262 } ],
        "docs":
          { "summary": "A hook that is triggered before an `insert()` operation.",
            "description":
              [ "The `beforeInsert()` hook returns a Promise that resolves to the item that",
                " will be inserted into the collection instead of the original item passed to the",
                " [`insert()`](wix-data.html#insert) operation.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`insert()`](wix-data.html#insert)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeInsert()` hook is called before [`insert()`](wix-data.html#insert)",
                " is executed it can affect the item that is inserted into the collection",
                " or block the [`insert()`](wix-data.html#insert)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before an insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the item to insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "  item.title = toUpperFirst(item.title);",
                      "  item.first_name = toUpperFirst(item.first_name);",
                      "  item.last_name = toUpperFirst(item.last_name);",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "function toUpperFirst(s) {",
                      "  return s.charAt(0).toUpperCase() + s.slice(1);",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered before an `insert()` operation.",
            "description":
              [ "The `beforeInsert()` hook returns a Promise that resolves to the item that",
                " will be inserted into the collection instead of the original item passed to the",
                " [`insert()`](wix-data.html#insert) operation.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`insert()`](wix-data.html#insert)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeInsert()` hook is called before [`insert()`](wix-data.html#insert)",
                " is executed it can affect the item that is inserted into the collection",
                " or block the [`insert()`](wix-data.html#insert)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before an insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the item to insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "  item.title = toUpperFirst(item.title);",
                      "  item.first_name = toUpperFirst(item.first_name);",
                      "  item.last_name = toUpperFirst(item.last_name);",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "function toUpperFirst(s) {",
                      "  return s.charAt(0).toUpperCase() + s.slice(1);",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "beforeQuery",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "The original query as specified by the caller.",
              "srcDoc": "The original query as specified by the caller." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataQuery" ] },
            "doc": "undefined. on fulfilled - The query to use instead of the original query specified by the caller.. on rejected - returning a rejected promise will block the operation and will return a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook",
            "srcDoc": "on fulfilled - The query to use instead of the original query specified by the caller.. on rejected - returning a rejected promise will block the operation and will return a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook" },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 291 } ],
        "docs":
          { "summary": "A hook that is triggered before a `find()` operation.",
            "description":
              [ "The `beforeQuery()` hook returns a Promise that resolves to the query that",
                " will be used to retrieve items instead of the original query.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`find()`](wix-data.WixDataQuery.html#find)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeQuery()` hook is called before [`find()`](wix-data.WixDataQuery.html#find)",
                " is executed it can affect the query that is used to retrieve items",
                " or block the [`find()`](wix-data.WixDataQuery.html#find)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a find",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeQuery(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeQuery(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "\tlet newQuery = query.eq(\"status\", \"active\");",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered before a `find()` operation.",
            "description":
              [ "The `beforeQuery()` hook returns a Promise that resolves to the query that",
                " will be used to retrieve items instead of the original query.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`find()`](wix-data.WixDataQuery.html#find)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeQuery()` hook is called before [`find()`](wix-data.WixDataQuery.html#find)",
                " is executed it can affect the query that is used to retrieve items",
                " or block the [`find()`](wix-data.WixDataQuery.html#find)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a find",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeQuery(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeQuery(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "\tlet newQuery = query.eq(\"status\", \"active\");",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "beforeRemove",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "itemId",
              "type": "string",
              "doc": "The ID of the original item to be removed.",
              "srcDoc": "The ID of the original item to be removed." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "undefined. on fulfilled - The ID to be used for the [`remove()`](wix-data.html#remove) instead of the original `itemId` specified by the caller... on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The ID to be used for the [`remove()`](wix-data.html#remove) instead of the original `itemId` specified by the caller... on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 319 } ],
        "docs":
          { "summary": "A hook that is called before a `remove()` operation.",
            "description":
              [ "The `beforeRemove` hook returns a Promise that resolves to the `itemId` of",
                " the item to be removed instead of the original `itemId`.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`remove()`](wix-data.html#remove)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeRemove()` hook is called before [`remove()`](wix-data.html#remove)",
                " is executed it can affect the item that is removed from the collection",
                " or block the [`remove()`](wix-data.html#remove)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeRemove(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change to the item to remove",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the item to remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeRemove(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change to the item to remove",
                      "\tlet newItemId = \"1234\";",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is called before a `remove()` operation.",
            "description":
              [ "The `beforeRemove` hook returns a Promise that resolves to the `itemId` of",
                " the item to be removed instead of the original `itemId`.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`remove()`](wix-data.html#remove)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeRemove()` hook is called before [`remove()`](wix-data.html#remove)",
                " is executed it can affect the item that is removed from the collection",
                " or block the [`remove()`](wix-data.html#remove)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeRemove(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change to the item to remove",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the item to remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeRemove(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change to the item to remove",
                      "\tlet newItemId = \"1234\";",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "beforeUpdate",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The original item to be updated.",
              "srcDoc": "The original item to be updated." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The item to be updated instead of the original item specified by the caller.. on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook.",
            "srcDoc": "on fulfilled - The item to be updated instead of the original item specified by the caller.. on rejected - Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 347 } ],
        "docs":
          { "summary": "A hook that is triggered before an `update()` operation.",
            "description":
              [ "The `beforeUpdate()` hook returns a Promise that resolves to the item that",
                " will be updated in the collection instead of the original item passed to the",
                " [`update()`](wix-data.html#update) operation.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`update()`](wix-data.html#update)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeUpdate()` hook is called before the [`update()`](wix-data.html#update)",
                " is executed it can affect the item that is updated in the collection",
                " or block the [`update()`](wix-data.html#update)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before an update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the item to update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "  item.title = toUpperFirst(item.title);",
                      "  item.first_name = toUpperFirst(item.first_name);",
                      "  item.last_name = toUpperFirst(item.last_name);",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "function toUpperFirst(s) {",
                      "  return s.charAt(0).toUpperCase() + s.slice(1);",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered before an `update()` operation.",
            "description":
              [ "The `beforeUpdate()` hook returns a Promise that resolves to the item that",
                " will be updated in the collection instead of the original item passed to the",
                " [`update()`](wix-data.html#update) operation.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`update()`](wix-data.html#update)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeUpdate()` hook is called before the [`update()`](wix-data.html#update)",
                " is executed it can affect the item that is updated in the collection",
                " or block the [`update()`](wix-data.html#update)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before an update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] },
                { "title": "Change the item to update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "  item.title = toUpperFirst(item.title);",
                      "  item.first_name = toUpperFirst(item.first_name);",
                      "  item.last_name = toUpperFirst(item.last_name);",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "function toUpperFirst(s) {",
                      "  return s.charAt(0).toUpperCase() + s.slice(1);",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ] } ] } },
      { "name": "onFailure",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "error",
              "type": "Error",
              "doc": "The error that caused the failure.",
              "srcDoc": "The error that caused the failure." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook.",
              "srcDoc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - Returning a fulfilled promise will result in a fulfilled data operation with the provided result.. on rejected - Returning a rejected promise will result in returning a rejected promise to the caller of the data operation.",
            "srcDoc": "on fulfilled - Returning a fulfilled promise will result in a fulfilled data operation with the provided result.. on rejected - Returning a rejected promise will result in returning a rejected promise to the caller of the data operation." },
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 376 } ],
        "docs":
          { "summary": "A hook that is triggered on any error or rejected Promise from any of the wix-data operations.",
            "description":
              [ "The `onFailure()` hook is triggered whenever a wix-data operation returns a",
                "rejected Promise or an error." ],
            "links": [],
            "examples":
              [ { "title": "A hook when a failure occurs",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_onFailure(error, context) {",
                      "  let hookError = error;  // see below",
                      "",
                      "  // handle error",
                      "",
                      "  return ret;",
                      "}",
                      "",
                      "/*",
                      " * hookError:",
                      " *",
                      " * {",
                      " *   \"message\": \"An item with _id [1234] already exists.\",",
                      " *   \"code\":    -409",
                      " * }",
                      " */" ] } ] },
        "srcDocs":
          { "summary": "A hook that is triggered on any error or rejected Promise from any of the wix-data operations.",
            "description":
              [ "The `onFailure()` hook is triggered whenever a wix-data operation returns a",
                "rejected Promise or an error." ],
            "links": [],
            "examples":
              [ { "title": "A hook when a failure occurs",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_onFailure(error, context) {",
                      "  let hookError = error;  // see below",
                      "",
                      "  // handle error",
                      "",
                      "  return ret;",
                      "}",
                      "",
                      "/*",
                      " * hookError:",
                      " *",
                      " * {",
                      " *   \"message\": \"An item with _id [1234] already exists.\",",
                      " *   \"code\":    -409",
                      " * }",
                      " */" ] } ] } } ],
  "callbacks": [],
  "messages":
    [ { "name": "HookContext",
        "locations":
          [ { "filename": "hooks.es6",
              "lineno": 1 } ],
        "docs":
          { "summary": "An object that contains contextual information about the hook being called.",
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "An object that contains contextual information about the hook being called.",
            "links": [],
            "examples": [] },
        "members":
          [ { "name": "collectionName",
              "type": "string",
              "docs": "The name of the collection the hook affects.",
              "srcDocs": "The name of the collection the hook affects." },
            { "name": "userId",
              "type": "string",
              "docs": "The current site user id. If no user is logged in to the site it may be null.",
              "srcDocs": "The current site user id. If no user is logged in to the site it may be null." },
            { "name": "userRole",
              "type": "string",
              "docs": "The permissions role of the current user. Possibilities are: `anonymous`, `siteMember`,  `siteOwner` and `dataOwner`.",
              "srcDocs": "The permissions role of the current user. Possibilities are: `anonymous`, `siteMember`,  `siteOwner` and `dataOwner`." },
            { "name": "currentItem",
              "type": "Object",
              "docs": "the item stored in the database before an `update` or `delete` operation.\nWill be `undefined` for all other operations.",
              "srcDocs": "the item stored in the database before an `update` or `delete` operation.\nWill be `undefined` for all other operations." } ],
        "labels": [] } ] }
{ "name": "WixDataFilter",
  "memberOf": "wix-data",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "filename": "filterMixin.es6",
      "lineno": 7 },
  "docs":
    { "description":
        [ "Provides functionality for filtering a query." ],
      "links": [],
      "examples": [] },
  "srcDocs":
    { "description":
        [ "Provides functionality for filtering a query." ],
      "links": [],
      "examples": [] },
  "properties": [],
  "operations":
    [ { "name": "between",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `rangeStart` and `rangeEnd`.",
              "srcDoc": "The property whose value will be compared with `rangeStart` and `rangeEnd`." },
            { "name": "rangeStart",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The beginning value of the range to match against.",
              "srcDoc": "The beginning value of the range to match against." },
            { "name": "rangeEnd",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The ending value of the range to match against.",
              "srcDoc": "The ending value of the range to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 497 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property is greater than or equal to `rangeStart` and less",
                " than or equal to `rangeEnd`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a between filter to a query",
                  "body":
                    [ "let newQuery = query.between(\"age\", 25, 65);" ] },
                { "title": "Create a query, add a between filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .between(\"age\", 25, 65)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a between filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .between(\"age\", 25, 65)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property is greater than or equal to `rangeStart` and less",
                " than or equal to `rangeEnd`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a between filter to a query",
                  "body":
                    [ "let newQuery = query.between(\"age\", 25, 65);" ] },
                { "title": "Create a query, add a between filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .between(\"age\", 25, 65)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a between filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .between(\"age\", 25, 65)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "contains",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string.",
              "srcDoc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for inside the specified property value.",
              "srcDoc": "The string to look for inside the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 332 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property contains the specified `string`.",
                "",
                " You can only use `contains()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a contains filter to a query",
                  "body":
                    [ "let newQuery = query.contains(\"description\", \"some words\");" ] },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .contains(\"description\", \"some words\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .contains(\"description\", \"some words\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property contains the specified `string`.",
                "",
                " You can only use `contains()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a contains filter to a query",
                  "body":
                    [ "let newQuery = query.contains(\"description\", \"some words\");" ] },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .contains(\"description\", \"some words\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .contains(\"description\", \"some words\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "endsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string.",
              "srcDoc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value.",
              "srcDoc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 308 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property ends with the specified `string`.",
                "",
                " You can only use `endsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add an ends with filter to a query",
                  "body":
                    [ "let newQuery = query.endsWith(\"last_name\", \"z\");" ] },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .endsWith(\"last_name\", \"z\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .endsWith(\"last_name\", \"z\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property ends with the specified `string`.",
                "",
                " You can only use `endsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add an ends with filter to a query",
                  "body":
                    [ "let newQuery = query.endsWith(\"last_name\", \"z\");" ] },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .endsWith(\"last_name\", \"z\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .endsWith(\"last_name\", \"z\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "eq",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.",
              "srcDoc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "void",
              "doc": "The value to match against.",
              "srcDoc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 20 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property equals the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If the value of the `propertyName` property is an Array, `eq()` includes items",
                " in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a query",
                  "body":
                    [ "let newQuery = query.eq(\"status\", \"active\");" ] },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property equals the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If the value of the `propertyName` property is an Array, `eq()` includes items",
                " in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a query",
                  "body":
                    [ "let newQuery = query.eq(\"status\", \"active\");" ] },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "ge",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.",
              "srcDoc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against.",
              "srcDoc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 74 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property is greater than or",
                " equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.ge(\"age\", 25);" ] },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ge(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ge(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property is greater than or",
                " equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.ge(\"age\", 25);" ] },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ge(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ge(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "gt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.",
              "srcDoc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against.",
              "srcDoc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object with the query definition, based on the supplied parameters.",
            "srcDoc": "A `WixDataQuery` object with the query definition, based on the supplied parameters." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 111 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property is greater than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than filter to a query",
                  "body":
                    [ "let newQuery = query.gt(\"age\", 25);" ] },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property is greater than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than filter to a query",
                  "body":
                    [ "let newQuery = query.gt(\"age\", 25);" ] },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "hasAll",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The name of the property whose value will be compared with `value`.",
              "srcDoc": "The name of the property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date",
                  "Array" ],
              "doc": "The values to match against.",
              "srcDoc": "The values to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 387 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.",
            "description":
              [ "The `hasAll()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property equals all of",
                " the specified values.",
                "",
                " If the value of the specified property is an array, `hasAll()` will match",
                " if there is a match in the elements of that array for all of the specified",
                " values.",
                "",
                " You can specify a list of values to match by providing comma-separated",
                " String, Number, or Date types as the `value` parameters. You can also",
                " specify a list of these values by including them in an array and providing",
                " the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has all filter to a query",
                  "body":
                    [ "let newQuery = query.hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"]);",
                      "",
                      "// or",
                      "",
                      "let newQuery = query.hasAll(\"colors\", \"red\", \"yellow\", \"blue\");" ] },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.",
            "description":
              [ "The `hasAll()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property equals all of",
                " the specified values.",
                "",
                " If the value of the specified property is an array, `hasAll()` will match",
                " if there is a match in the elements of that array for all of the specified",
                " values.",
                "",
                " You can specify a list of values to match by providing comma-separated",
                " String, Number, or Date types as the `value` parameters. You can also",
                " specify a list of these values by including them in an array and providing",
                " the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has all filter to a query",
                  "body":
                    [ "let newQuery = query.hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"]);",
                      "",
                      "// or",
                      "",
                      "let newQuery = query.hasAll(\"colors\", \"red\", \"yellow\", \"blue\");" ] },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The name of the property whose value will be compared with `value`.",
              "srcDoc": "The name of the property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date",
                  "Array" ],
              "doc": "The values to match against.",
              "srcDoc": "The values to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 356 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.",
            "description":
              [ "The `hasSome()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property equals any of",
                " the specified values.",
                "",
                " If the value of the specified property is an array, `hasSome()` will match",
                " if any of the elements of that array match any of the specified values.",
                "",
                " You can specify a list of values to match by providing comma-separated",
                " String, Number, or Date types as the `value` parameters. You can also",
                " specify a list of these values by including them in an array and providing",
                " the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has some filter to a query",
                  "body":
                    [ "let newQuery = query.hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"]);",
                      "",
                      "// or",
                      "",
                      "let newQuery = query.hasSome(\"colors\", \"red\", \"yellow\", \"blue\");" ] },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.",
            "description":
              [ "The `hasSome()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property equals any of",
                " the specified values.",
                "",
                " If the value of the specified property is an array, `hasSome()` will match",
                " if any of the elements of that array match any of the specified values.",
                "",
                " You can specify a list of values to match by providing comma-separated",
                " String, Number, or Date types as the `value` parameters. You can also",
                " specify a list of these values by including them in an array and providing",
                " the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has some filter to a query",
                  "body":
                    [ "let newQuery = query.hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"]);",
                      "",
                      "// or",
                      "",
                      "let newQuery = query.hasSome(\"colors\", \"red\", \"yellow\", \"blue\");" ] },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "isEmpty",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The name of the property to check for a value.",
              "srcDoc": "The name of the property to check for a value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 251 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property does not exist or does not have any value.",
            "description":
              [ "The `isEmpty()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the",
                " value of the specified property is `null` or `undefined` or the property does",
                " not exist.",
                "",
                " If the property contains any value at all for a given item, including the",
                " empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isEmpty(\"bio\");" ] },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isEmpty(\"bio\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isEmpty(\"bio\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property does not exist or does not have any value.",
            "description":
              [ "The `isEmpty()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the",
                " value of the specified property is `null` or `undefined` or the property does",
                " not exist.",
                "",
                " If the property contains any value at all for a given item, including the",
                " empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isEmpty(\"bio\");" ] },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isEmpty(\"bio\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isEmpty(\"bio\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "isNotEmpty",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The name of the property to check for a value.",
              "srcDoc": "The name of the property to check for a value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 219 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property has any value.",
            "description":
              [ "The `isNotEmpty()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the",
                " value of the specified property is not `null` or `undefined`.",
                "",
                " If the property contains any value at all for a given item, including the",
                " empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isNotEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isNotEmpty(\"bio\");" ] },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isNotEmpty(\"bio\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isNotEmpty(\"bio\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property has any value.",
            "description":
              [ "The `isNotEmpty()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the",
                " value of the specified property is not `null` or `undefined`.",
                "",
                " If the property contains any value at all for a given item, including the",
                " empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isNotEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isNotEmpty(\"bio\");" ] },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isNotEmpty(\"bio\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isNotEmpty(\"bio\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "le",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.",
              "srcDoc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against.",
              "srcDoc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 147 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property is less than or equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.le(\"age\", 25);" ] },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .le(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .le(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property is less than or equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.le(\"age\", 25);" ] },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .le(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .le(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "lt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.",
              "srcDoc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against.",
              "srcDoc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object with the query definition, based on the supplied parameters.",
            "srcDoc": "A `WixDataQuery` object with the query definition, based on the supplied parameters." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 183 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property is less than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than filter to a query",
                  "body":
                    [ "let newQuery = query.lt(\"age\", 25);" ] },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property is less than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of items can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares alphabetically. The sort is based on the JavaScript sort methodology, which is a lexicographical sort that compares Unicode characters by their code points." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than filter to a query",
                  "body":
                    [ "let newQuery = query.lt(\"age\", 25);" ] },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "ne",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.",
              "srcDoc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "void",
              "doc": "The value to match against.",
              "srcDoc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 47 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property does not equal the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type is considered not equal to the same number stored as a Number type.",
                "",
                " If the value of the `propertyName` property is an Array, `ne()` includes items",
                " in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a not equals filter to a query",
                  "body":
                    [ "let newQuery = query.ne(\"status\", \"active\");" ] },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ne(\"status\", \"active\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ne(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property does not equal the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type is considered not equal to the same number stored as a Number type.",
                "",
                " If the value of the `propertyName` property is an Array, `ne()` includes items",
                " in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a not equals filter to a query",
                  "body":
                    [ "let newQuery = query.ne(\"status\", \"active\");" ] },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ne(\"status\", \"active\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ne(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "not",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as a `not` condition.",
              "srcDoc": "A query to add to the initial query as a `not` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 456 } ],
        "docs":
          { "summary": "Adds a `not` condition to the query or filter.",
            "description":
              [ "The `not()` function adds a `not` condition to a `WixDataQuery` or `WixDataFilter`. A query or filter with a `not`",
                " returns all the items that match the query or filter as defined up to the `not`",
                " function, but don't match the query or filter passed to the `not` function.",
                "",
                " If the query or filter only contains a `not()` function, it returns all the items",
                " that don't match the query defined by the `not` method.",
                "",
                " The collections referenced by both the initial query and the query passed",
                " to the `not` function must be the same." ],
            "links": [],
            "examples":
              [ { "title": "Add a not to a query",
                  "body":
                    [ "let newQuery = query1.not(query2);" ] },
                { "title": "Create a query, add a not, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .not(",
                      "    wixData.query(\"myCollection\")",
                      "      .eq(\"access_type\", \"restricted\")",
                      "  )",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Adds a `not` condition to the query or filter.",
            "description":
              [ "The `not()` function adds a `not` condition to a `WixDataQuery` or `WixDataFilter`. A query or filter with a `not`",
                " returns all the items that match the query or filter as defined up to the `not`",
                " function, but don't match the query or filter passed to the `not` function.",
                "",
                " If the query or filter only contains a `not()` function, it returns all the items",
                " that don't match the query defined by the `not` method.",
                "",
                " The collections referenced by both the initial query and the query passed",
                " to the `not` function must be the same." ],
            "links": [],
            "examples":
              [ { "title": "Add a not to a query",
                  "body":
                    [ "let newQuery = query1.not(query2);" ] },
                { "title": "Create a query, add a not, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .not(",
                      "    wixData.query(\"myCollection\")",
                      "      .eq(\"access_type\", \"restricted\")",
                      "  )",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } },
      { "name": "or",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as an `or` condition.",
              "srcDoc": "A query to add to the initial query as an `or` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 420 } ],
        "docs":
          { "summary": "Adds an `or` condition to the query or filter.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to a `WixDataQuery` or `WixDataFilter`. A query or filter",
                " with an `or` returns all the items that match the query or filter as defined up to",
                " the `or` function, the items that match the query or filter passed to the `or`",
                " function, and the items that match both.",
                "",
                " If the query or filter only contains an `or()` function, it returns all the items in the collection.",
                "",
                " The collections referenced by both the initial query and the query passed",
                " to the `or` function must be the same." ],
            "links": [],
            "examples":
              [ { "title": "Add an or to a query",
                  "body":
                    [ "let newQuery = query1.or(query2);" ] },
                { "title": "Create a query, add an or, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .or(",
                      "    wixData.query(\"myCollection\")",
                      "      .gt(\"age\", 65)",
                      "  )",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "",
                      "  /*",
                      "   * For example, results contain items where age is:",
                      "   * 18",
                      "   * 21",
                      "   * 67",
                      "   * 90",
                      "   *",
                      "   * But not items where age is:",
                      "   * 25",
                      "   * 30",
                      "   * 40",
                      "   * 65",
                      "   */" ] } ] },
        "srcDocs":
          { "summary": "Adds an `or` condition to the query or filter.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to a `WixDataQuery` or `WixDataFilter`. A query or filter",
                " with an `or` returns all the items that match the query or filter as defined up to",
                " the `or` function, the items that match the query or filter passed to the `or`",
                " function, and the items that match both.",
                "",
                " If the query or filter only contains an `or()` function, it returns all the items in the collection.",
                "",
                " The collections referenced by both the initial query and the query passed",
                " to the `or` function must be the same." ],
            "links": [],
            "examples":
              [ { "title": "Add an or to a query",
                  "body":
                    [ "let newQuery = query1.or(query2);" ] },
                { "title": "Create a query, add an or, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .or(",
                      "    wixData.query(\"myCollection\")",
                      "      .gt(\"age\", 65)",
                      "  )",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "",
                      "  /*",
                      "   * For example, results contain items where age is:",
                      "   * 18",
                      "   * 21",
                      "   * 67",
                      "   * 90",
                      "   *",
                      "   * But not items where age is:",
                      "   * 25",
                      "   * 30",
                      "   * 40",
                      "   * 65",
                      "   */" ] } ] } },
      { "name": "startsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string.",
              "srcDoc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value.",
              "srcDoc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query.",
            "srcDoc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 284 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property starts with the defined `string`.",
                "",
                " You can only use `startsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a starts with filter to a query",
                  "body":
                    [ "let newQuery = query.startsWith(\"last_name\", \"M\");" ] },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .startsWith(\"last_name\", \"M\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .startsWith(\"last_name\", \"M\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Refines a query or filter to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the value",
                " of the specified property starts with the defined `string`.",
                "",
                " You can only use `startsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a starts with filter to a query",
                  "body":
                    [ "let newQuery = query.startsWith(\"last_name\", \"M\");" ] },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .startsWith(\"last_name\", \"M\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .startsWith(\"last_name\", \"M\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    let items = results.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = results.totalCount;",
                      "    let pageSize = results.pageSize;",
                      "    let currentPage = results.currentPage;",
                      "    let totalPages = results.totalPages;",
                      "    let hasNext = results.hasNext();",
                      "    let hasPrev = results.hasPrev();",
                      "    let length = results.length;",
                      "    let query = results.query;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ] } ] } } ],
  "callbacks": [],
  "messages": [] }
{ "name": "wix-secrets-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "getSecret.js" },
  "docs":
    { "description":
        [ "The wix-secrets-backend module contains functionality for",
          "managing secrets you safely store in your site's <a href=\"https://support.wix.com/en/article/corvid-about-the-secrets-manager\" target=\"_blank\">Secrets Manager</a>.",
          "",
          "The Secrets Manager allows you to store and encrypt API keys and other secrets on your site.",
          "With the Secrets API, you can safely work with secrets in your backend code.",
          "",
          " Follow this general procedure for working with API keys or other secrets using the Secrets Manager:",
          "",
          " 1. Get private information such as an API key from a 3rd-party service.",
          " 1. Store the private information as a new secret in the <a href=\"https://support.wix.com/en/article/corvid-working-with-the-secrets-manager\" target=\"_blank\">Secrets Manager</a> in your site's dashboard or with the `createSecret()` function. Assign a name to the secret.",
          " 1. In your backend code, instead of hardcoding the API key, use the `getSecret()` function with the secret name assigned in the Secrets Manager. When the code runs, the value of the secret is extracted from the Secrets Manager.",
          "",
          "",
          "**Note:** By default, site contributors do not have permission to create secrets",
          "and view secret values in the Secrets Manager. Contributors who have access to the",
          "editor can retrieve a secret's value using code.",
          "",
          " To use the Secrets API, import the `getSecret()` function from the `wix-secrets-backend` module:",
          "",
          "   ```javascript",
          "   import wixSecretsBackend from 'wix-secrets-backend';",
          "",
          "   function getSomeSecretValue(name) {",
          "     wixSecretsBackend.getSecret(name).then((value) => {",
          "       // use secret value",
          "     })",
          "   }",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "createSecret",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "secret",
              "type": "wix-secrets-backend.Secret",
              "doc": "The object including the fields of a new secret to be stored." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - The ID of the created secret.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "createSecret.js" } ],
        "docs":
          { "summary": "Creates a new secret.",
            "description":
              [ "The createSecret() function returns a Promise that resolves to the newly created secret's ID when a secret has been created in the <a href=\"https://support.wix.com/en/article/corvid-working-with-the-secrets-manager\">Secrets Manager</a>.",
                "Secrets created by this function are available under the <a href=\"https://support.wix.com/en/article/corvid-working-with-the-secrets-manager\" target=\"_blank\">Secrets Manager</a> section in your site's dashboard, just like any other secert created using the UI." ],
            "links": [],
            "examples":
              [ { "title": "Create a new secret programmatically",
                  "body":
                    [ "import {createSecret} from 'wix-secrets-backend';",
                      "",
                      "export async function createNewSecret(name, value, description) {",
                      "  return createSecret({name: name, value: value, description: description})",
                      "    .then((id) => {",
                      "      // The id of the new secret, assigned by the secrets-manager service. Can be later retrieved by calling listSecretInfo().",
                      "      // The new secret is now stored in the secrets-manager of your site and available via the UI.",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The secret's name cannot start with `wix` or be identical to an existing secret's name." ] } },
      { "name": "deleteSecret",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "The ID of the secret to be deleted." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the secret is deleted from the Secrets Manager.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "deleteSecret.js" } ],
        "docs":
          { "summary": "Deletes an existing secret by ID.",
            "description":
              [ "The `deleteSecret()` function returns a Promise that resolves a secret from the Secrets Manager",
                "is deleted.",
                "",
                "You can retrieve the `id` parameter from the [`listSecretInfo()`](wix-secrets-",
                "backend.html#listSecretInfo) function. The `id` is not the same as the secret `name` used by the",
                "[`getSecret()`](wix-secrets-backend.html#getSecret) function.",
                "Note that the id used here is the id retrieved from [`listSecretInfo()`](wix-secrets-backend.html#listSecretInfo), not the secret name used by [`getSecret()`](wix-secrets-backend.html#getSecret)" ],
            "links": [],
            "examples":
              [ { "title": "Delete an existing secret",
                  "body":
                    [ "import {deleteSecret} from 'wix-secrets-backend';",
                      "",
                      "export async function deleteMySecret(id) {",
                      "  return deleteSecret(id)",
                      "    .then(() => {",
                      "      // Secret is now deleted and cannot be retrieved by getSecret() anymore.",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Deleting a secret is irreversible and will break all code using the secret." ] } },
      { "name": "getSecret",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "name",
              "type": "string",
              "doc": "The name of the secret to get the value of." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - The value of the secret with the given name.\nRejected - Error message." },
        "locations":
          [ { "lineno": 35,
              "filename": "getSecret.js" } ],
        "docs":
          { "summary": "Gets a secret by name.",
            "description":
              [ "The `getSecret()` function returns a Promise that resolves to the value of the secret",
                " that was stored in the Secrets Manager with the given name." ],
            "links": [],
            "examples":
              [ { "title": "Get a secret and use it to fetch a JSON from a 3rd-party service",
                  "body":
                    [ "import {getSecret} from 'wix-secrets-backend';",
                      "import {getJSON} from 'wix-fetch';",
                      "",
                      "export function getSomeJSON() {",
                      "  return getSecret(\"myApiKeyName\")",
                      "    .then((secret) => {",
                      "      return getJSON(`https://someapi.com/api/someendpoint?apiKey=${secret}`);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Get an API key and use it to fetch a JSON from a weather service",
                  "body":
                    [ "/************************************",
                      " * backend code - getWeather.jsw *",
                      " ************************************/",
                      "",
                      " import {getSecret} from 'wix-secrets-backend';",
                      " import {getJSON} from 'wix-fetch';",
                      "",
                      " export async function getWeatherJson() {",
                      "   const secret = await getSecret(\"openWeatherApiKey\");",
                      "   return getJSON(`https://api.openweathermap.org/data/2.5/weather?q=London&units=metric&APPID=${secret}`);",
                      " }",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      " import {getWeatherJson} from 'backend/getWeather';",
                      "",
                      " export async function getWeather_click(event) {",
                      "   let json = await getWeatherJson();",
                      "   $w('#weather').text = json.weather[0].description; // \"mist\"",
                      "   $w('#temp').text = json.main.temp; // 9.4 (degrees Celsius)",
                      " }",
                      "" ],
                  "extra":
                    { "description": "In this example, we use the Secrets API to get an API key from the Secrets Manager. We use the key in the backend to fetch a JSON with weather information from a 3rd-party service, and return the JSON to the client side." } },
                { "title": "Get an API key and use it to send an email with the SendGrid npm interface",
                  "body":
                    [ "/************************************",
                      " * backend code - sendEmail.jsw *",
                      " ************************************/",
                      "",
                      " import {getSecret} from 'wix-secrets-backend';",
                      " import sendGridMail from '@sendgrid/mail';",
                      "",
                      " export async function sendEmail(recipient, sender, subject, body) {",
                      "   const secret = await getSecret(\"SendGridApiKey\");",
                      "   sendGridMail.setApiKey(secret);",
                      "   const message = {",
                      "     \"to\": recipient,",
                      "     \"from\": sender,",
                      "     \"subject\": subject,",
                      "     \"text\": body",
                      "   };",
                      "   sendGridMail.send(message);",
                      " }",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      " import {sendEmail} from 'backend/sendEmail';",
                      "",
                      " export function sendEmailButton_click(event) {",
                      "   sendEmail(",
                      "     $w(\"#toEmail\").value,",
                      "     $w(\"#fromEmail\").value,",
                      "     $w(\"#subject\").value,",
                      "     $w(\"#emailContent\").value",
                      "   )",
                      "   .then(() => {",
                      "     console.log(\"Email sent\");",
                      "   })",
                      "   .catch((error) => {",
                      "     console.log(error);",
                      "   })",
                      " }",
                      "" ],
                  "extra":
                    { "description": "In this example, we added the SendGrid package to our site using the Package Manager. We created a backend function that gets an API key from the Secrets Manager, sets it as the SendGrid API key, and sends an email using the SendGrid service. We call the function from the client side when a site visitor submits email information via a form." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "To prevent malicious users from accessing the value of your secret,\ndon't return the value of the secret to client side. Only use the secret's value in the backend." ] } },
      { "name": "getSecretsMetadata",
        "labels":
          [ "changed",
            "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-secrets-backend.SecretMetadata" ] } ] },
            "doc": "Rejected - Error message." },
        "locations":
          [ { "lineno": 11,
              "filename": "getSecretsMetadata.js" } ],
        "docs":
          { "summary": "Gets a list of metadata objects for all secrets stored in the Secrets Manager.",
            "description":
              [ "Returns a list of metadata objects for all the secrets stored for the site.",
                "The secret's value is omitted for security reasons, and can be retrieved using the [`getSecert()`](wix-secrets-backend.html#getSecert) function for each individual secret." ],
            "links": [],
            "examples":
              [ { "title": "Get metadata for all secrets",
                  "body":
                    [ "/****************************************",
                      " * backend code - useSecretMetadata.jsw *",
                      " ****************************************/",
                      "",
                      "import {getSecretsMetadata, deleteSecret, getSecret} from 'wix-secrets-backend';",
                      "",
                      "export async function deleteFirstSecret() {",
                      "  // Using getSecretsMetadata() to fetch a secret-id in order to delete it",
                      "  return getSecretsMetadata()",
                      "    .then((secrets) => {",
                      "      return deleteSecret(secrets[0].id);",
                      "    })",
                      "    .then(() => {",
                      "      console.log(\"secret is gone!\")",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error);",
                      "    });",
                      "}",
                      "",
                      "export async function getFirstSecretValue() {",
                      "  // Using getSecretsMetadata() to fetch a secret-name in order to fetch its value",
                      "  return getSecretsMetadata()",
                      "    .then((secrets) => {",
                      "      return getSecret(secrets[0].name);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listSecretInfo",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-secrets-backend.SecretInfo" ] } ] },
            "doc": "Rejected - Error message." },
        "locations":
          [ { "lineno": 11,
              "filename": "listSecrerInfo.js" } ],
        "docs":
          { "summary": "Gets a list of info objects for all secrets stored in the Secrets Manager.",
            "description":
              [ "Returns a list of info objects for all the secrets stored for the site.",
                "The secret's value is omitted for security reasons, and can be retrieved using the [`getSecert()`](wix-secrets-backend.html#getSecert) function for each individual secret." ],
            "links": [],
            "examples":
              [ { "title": "Get info for all secrets",
                  "body":
                    [ "import {listSecretInfo, deleteSecret, getSecret} from 'wix-secrets-backend';",
                      "",
                      "export async function deleteFirstSecret() {",
                      "  // Using listSecretInfo() to fetch a secret-id in order to delete it",
                      "  return listSecretInfo()",
                      "    .then((secrets) => {",
                      "      return deleteSecret(secrets[0].id);",
                      "    })",
                      "    .then(() => {",
                      "      console.log(\"secret is gone!\")",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error);",
                      "    });",
                      "}",
                      "",
                      "export async function getFirstSecretValue() {",
                      "  // Using listSecretInfo() to fetch a secret-name in order to fetch its value",
                      "  return listSecretInfo()",
                      "    .then((secrets) => {",
                      "      return getSecret(secrets[0].name);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateSecret",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "The ID of the secret to update." },
            { "name": "secret",
              "type": "wix-secrets-backend.Secret",
              "doc": "The information to update the secret with." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the secret is updated.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "updateSecret.js" } ],
        "docs":
          { "summary": "Updates the specified fields of an existing secret by ID.\n\nThe `updateSecret()` function returns a Promise that resolves when the secret is successfully updated.\n\nYou can update one or more secret properties. Only the properties passed in the Secret object will be updated.\nAll other properties will remain the same.\n\nYou can retrieve the `id` parameter from the [`listSecretInfo()`](wix-secrets-\nbackend.html#listSecretInfo) function. The `id` is not the same as the secret `name` used by the\n[`getSecret()`](wix-secrets-backend.html#getSecret) function.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "@note Changing a secret's name or value will break all code using the secret.\n\nYou cannot rename the secret's name with a name that is already in use." ] } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Secret",
        "locations":
          [ { "lineno": 1,
              "filename": "secret.js" } ],
        "docs":
          { "summary": "An object representing information for creating or updating a secret.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "The confidential value to protect, such as an API key." },
            { "name": "description",
              "type": "string",
              "doc": "An optional text describing the secret's purpose or any other notes.",
              "optional": true },
            { "name": "A",
              "type": "string",
              "doc": "unique, meaningful name used for retrieving the secret at runtime using [`getSecret()`](wix-secrets-backend.html#getSecret). You can use alphanumeric characters and the following special characters: `_+=-#@$#`. Spaces are not supported." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "SecretInfo",
        "locations":
          [ { "lineno": 1,
              "filename": "listSecrerInfo.js" } ],
        "docs":
          { "summary": "Information about a secret, not including the protected `value`.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "The",
              "type": "string",
              "doc": "secret's ID." },
            { "name": "name",
              "type": "string",
              "doc": "A unique, meaningful name used for retrieving the secret at runtime using [`getSecret()`](wix-secrets-backend.html#getSecret)." },
            { "name": "description",
              "type": "string",
              "doc": "An optional text describing the secret's purpose or any other notes about it." },
            { "name": "createdDate",
              "type": "Date",
              "doc": "The creation timestamp of the secret" },
            { "name": "updatedDate",
              "type": "Date",
              "doc": "The last-update timestamp of the secret" } ],
        "extra":
          {  },
        "labels":
          [ "new" ] },
      { "name": "SecretMetadata",
        "locations":
          [ { "lineno": 1,
              "filename": "getSecretsMetadata.js" } ],
        "docs":
          { "summary": "Information about a secret, not including the protected `value`.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "A unique, meaningful name used for retrieving the secret at runtime using [`getSecret()`](wix-secrets-backend.html#getSecret)." },
            { "name": "description",
              "type": "string",
              "doc": "An optional text describing the secret's purpose or any other notes about it." },
            { "name": "createdAt",
              "type": "Date",
              "doc": "The creation timestamp of the secret" },
            { "name": "updatedAt",
              "type": "Date",
              "doc": "The last-update timestamp of the secret" },
            { "name": "The",
              "type": "string",
              "doc": "secret's ID." } ],
        "extra":
          {  },
        "labels":
          [ "changed",
            "removed" ] } ],
  "extra":
    {  } }
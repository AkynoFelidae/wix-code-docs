{ "name": "PanelTextInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedMixin",
      "$w.Element" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "PanelTextInput.js" },
  "docs":
    { "summary": "An input element for capturing small amounts of text.",
      "description":
        [ "A text input is an input field that receives strings.",
          "",
          "<blockquote class=\"important\">__Important:__ ",
          "This element is available only in [custom panels built in Blocks](https://support.wix.com/en/article/wix-blocks-designing-custom-panels-for-your-widgets-action-bar-buttons). ",
          "</blockquote>" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "autoFocus",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 183,
              "filename": "PanelTextInput.js" },
            { "lineno": 195,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets whether the input field is in focus.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "defaultText",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 43,
              "filename": "PanelTextInput.js" },
            { "lineno": 54,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the default value of a text input.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "divider",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"long\"",
        "locations":
          [ { "lineno": 119,
              "filename": "PanelTextInput.js" },
            { "lineno": 136,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed under the element.",
            "description":
              [ "The divider type can be:",
                "* `\"long\"`",
                "* `\"short\"`",
                "* `\"none\"`" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 82,
              "filename": "PanelTextInput.js" },
            { "lineno": 93,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the label of an element.",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let label = $w(\"#myElement\").label;  // \"My element's label\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxLength",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 281,
              "filename": "PanelTextInput.js" },
            { "lineno": 293,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum length of input text.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 100,
              "filename": "PanelTextInput.js" },
            { "lineno": 111,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the placeholder text of an element.",
            "links": [],
            "examples":
              [ { "title": "Get an element's placeholder",
                  "body":
                    [ "let label = $w(\"#myElement\").placeholder;  // \"Type your name\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's placeholder",
                  "body":
                    [ "$w(\"#myElement\").placeholder = \"New Placeholder\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prefix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 143,
              "filename": "PanelTextInput.js" },
            { "lineno": 155,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets text that is displayed before the text input field.",
            "links": [],
            "examples":
              [ { "title": "Get a text input's prefix",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").prefix;  // \"Mr.\"" ],
                  "extra":
                    {  } },
                { "title": "Set a text input's prefix",
                  "body":
                    [ "$w(\"#myElement\").prefix = \"New prefix\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "readOnly",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 163,
              "filename": "PanelTextInput.js" },
            { "lineno": 175,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets whether the value of the input element is read-only (cannot be modified by users).",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "regexPattern",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 241,
              "filename": "PanelTextInput.js" },
            { "lineno": 253,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the regex validation pattern.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectTextOnFocus",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 202,
              "filename": "PanelTextInput.js" },
            { "lineno": 214,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets whether the input field content is automatically selected on focus.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 62,
              "filename": "PanelTextInput.js" },
            { "lineno": 76,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip;  // \"Tooltip text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"New tooltip\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "usePatternValidation",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 221,
              "filename": "PanelTextInput.js" },
            { "lineno": 233,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets whether the input field uses regex validation.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validationMessage",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 262,
              "filename": "PanelTextInput.js" },
            { "lineno": 274,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the error message that is displayed if the regex validation fails.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 19,
              "filename": "PanelTextInput.js" },
            { "lineno": 35,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets an element's value.",
            "description":
              [ "To reset the element, restoring any placeholder text, set the value",
                " property to `null` or `undefined`.",
                "",
                "> **Note**: Changing an element's `value` in code does not trigger an `onChange` event." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 307,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onChange()`",
                " because the property at this point contains values prior to the `onChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }
{ "name": "PanelButton",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedMixin",
      "$w.Element" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "PanelButton.js" },
  "docs":
    { "summary": "A button on your panel.",
      "description":
        [ "> **Important**:  ",
          "> This element is available only in [custom panels built in Blocks](https://support.wix.com/en/article/wix-blocks-designing-custom-panels-for-your-widgets-action-bar-buttons)." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "buttonLabel",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 53,
              "filename": "PanelButton.js" },
            { "lineno": 64,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets the button's label (the text that appears on the button).",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "divider",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"long\"",
        "locations":
          [ { "lineno": 187,
              "filename": "PanelButton.js" },
            { "lineno": 204,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed under the element.",
            "description":
              [ "The divider type can be:",
                "* `\"long\"`",
                "* `\"short\"`",
                "* `\"none\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get an element's divider type",
                  "body":
                    [ "let divider = $w(\"#myElement\").divider;  // \"none\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's divider type",
                  "body":
                    [ "$w(\"#myElement\").divider = \"none\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "fullWidth",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 167,
              "filename": "PanelButton.js" },
            { "lineno": 179,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets whether the button is stretched to the full width of the panel.",
            "links": [],
            "examples":
              [ { "title": "Get whether a button is full width",
                  "body":
                    [ "let isFullWidth = $w(\"#myButton\").fullWidth;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set a button to be full width",
                  "body":
                    [ "$w(\"#myButton\").fullWidth = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 36,
              "filename": "PanelButton.js" },
            { "lineno": 47,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets the text above the button (field title).",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let label = $w(\"#myElement\").label;  // \"My element's label\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prefixIcon",
        "labels": [],
        "get": true,
        "set": true,
        "type": "$w.PanelButton.icon",
        "defaultValue": "`undefined`",
        "locations":
          [ { "lineno": 126,
              "filename": "PanelButton.js" },
            { "lineno": 138,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets the icon that precedes the button's label (in SVG format).",
            "links": [],
            "examples":
              [ { "title": "Get a button's prefix icon",
                  "body":
                    [ "let skin = $w(\"#myButton\").prefixIcon;  // {svgId: \"<svg> <circle cx=\\\"5\\\" cy=\\\"5\\\" r=\\\"4\\\" fill=\\\"white\\\" /> </svg>\"}" ],
                  "extra":
                    {  } },
                { "title": "Set a button's prefix icon",
                  "body":
                    [ "const mySvg = \"<svg> <circle cx=\\\"5\\\" cy=\\\"5\\\" r=\\\"4\\\" fill=\\\"white\\\" /> </svg>\";",
                      "",
                      "$w(\"#myButton\").prefixIcon = {svgId: mySvg};" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "size",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"medium\"",
        "locations":
          [ { "lineno": 100,
              "filename": "PanelButton.js" },
            { "lineno": 117,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets the button's size.",
            "description":
              [ "The size can be:",
                "* `\"small\"`",
                "* `\"medium\"`",
                "* `\"large\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get a button's size",
                  "body":
                    [ "let size = $w(\"#myButton\").size;  // \"small\"" ],
                  "extra":
                    {  } },
                { "title": "Set a button's size",
                  "body":
                    [ "$w(\"#myButton\").size = \"small\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skin",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"standard\"",
        "locations":
          [ { "lineno": 72,
              "filename": "PanelButton.js" },
            { "lineno": 93,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets the button's skin.",
            "description":
              [ "The skin can be:",
                "* `\"standard\"`",
                "* `\"standard secondary\"`",
                "* `\"premium\"`",
                "* `\"premium secondary\"`",
                "* `\"alert\"`",
                "* `\"alert secondary\"`",
                "* `\"inverted\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get a button's skin",
                  "body":
                    [ "let skin = $w(\"#myButton\").skin;  // \"premium\"" ],
                  "extra":
                    {  } },
                { "title": "Set a button's skin",
                  "body":
                    [ "$w(\"#myButton\").skin = \"premium\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "suffixIcon",
        "labels": [],
        "get": true,
        "set": true,
        "type": "$w.PanelButton.icon",
        "defaultValue": "`undefined`",
        "locations":
          [ { "lineno": 146,
              "filename": "PanelButton.js" },
            { "lineno": 158,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets the icon that follows the button's label (in SVG format).",
            "links": [],
            "examples":
              [ { "title": "Get a button's suffix icon",
                  "body":
                    [ "let skin = $w(\"#myButton\").suffixIcon;  // {svgId: \"<svg> <circle cx=\\\"5\\\" cy=\\\"5\\\" r=\\\"4\\\" fill=\\\"white\\\" /> </svg>\"}" ],
                  "extra":
                    {  } },
                { "title": "Set a button's suffix icon",
                  "body":
                    [ "const mySvg = \"<svg> <circle cx=\\\"5\\\" cy=\\\"5\\\" r=\\\"4\\\" fill=\\\"white\\\" /> </svg>\";",
                      "",
                      "$w(\"#myButton\").suffixIcon = {svgId: mySvg};" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 16,
              "filename": "PanelButton.js" },
            { "lineno": 30,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip;  // \"Tooltip text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"New tooltip\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onClick",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is clicked." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 210,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element is clicked.",
            "description":
              [ "An element receives a `click` event when a user clicks on the element",
                " and releases.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                " ",
                "![Properties and Events panel](images/properties_and_events.png \"Properties and Events panel\")",
                "",
                " This will automatically add the required code for the selected element and event:",
                "",
                " ```javascript ",
                "    export function button1_click(event) {",
                "       // This function was added from the Properties & Events panel. To learn more, visit http://wix.to/UcBnC-4",
                "       // Add your code for this event here: ",
                "     }  ",
                "```" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "icon",
        "locations":
          [ { "lineno": 242,
              "filename": "PanelButton.js" } ],
        "docs":
          { "summary": "An object representing an SVG icon.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "svgId",
              "type": "string",
              "doc": "An SVG element" } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }
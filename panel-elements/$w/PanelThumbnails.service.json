{ "name": "PanelThumbnails",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "PanelThumbnails.js" },
  "docs":
    { "summary": "Thumbnails allow users to select an option using a set of thumbnail images.",
      "description":
        [ "Thumbnails allow users to select an option using a set of thumbnail images." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "divider",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 75,
              "filename": "PanelThumbnails.js" },
            { "lineno": 92,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed beneath the element.",
            "description":
              [ "The divider type can be:",
                "* `\"long\"`",
                "* `\"short\"`",
                "* `\"none\"`" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 56,
              "filename": "PanelThumbnails.js" },
            { "lineno": 68,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the label of an element.",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let label = $w(\"#myElement\").label;  // \"My element's label\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "numberOfColumns",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 99,
              "filename": "PanelThumbnails.js" },
            { "lineno": 111,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the number of thumbnail columns.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "options",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.PanelThumbnails.option" ] },
        "defaultValue": "empty array",
        "locations":
          [ { "lineno": 183,
              "filename": "PanelThumbnails.js" },
            { "lineno": 197,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the options in the thumbnail selector.",
            "description":
              [ "Setting the `options` property sets all the options available to a user." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showEmptyThumbnail",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 143,
              "filename": "PanelThumbnails.js" },
            { "lineno": 155,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets whether an empty thumbnail is shown.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showLabels",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 163,
              "filename": "PanelThumbnails.js" },
            { "lineno": 175,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets whether the thumbnail labels are shown.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "thumbnailHeight",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 119,
              "filename": "PanelThumbnails.js" },
            { "lineno": 135,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets the thumbnail's height ratio.",
            "description":
              [ "The height ratio can be:",
                "* `\"Fixed ratio (1:1)\"`",
                "* `\"Fluid\"`" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 36,
              "filename": "PanelThumbnails.js" },
            { "lineno": 50,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip;  // \"Tooltip text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"New tooltip\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 14,
              "filename": "PanelThumbnails.js" },
            { "lineno": 30,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Sets or gets an element's value.",
            "description":
              [ "To reset the element, restoring any placeholder text, set the value",
                " property to `null` or `undefined`.",
                "",
                "> **Note**: Changing an element's `value` in code does not trigger an `onChange` event." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 224,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onChange()`",
                " because the property at this point contains values prior to the `onChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "illustration",
        "locations":
          [ { "lineno": 215,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "An object representing an SVG illustration.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "svgId",
              "type": "string",
              "doc": "An SVG element" },
            { "type": "$w.PanelThumbnails.illustration" } ],
        "extra":
          {  },
        "labels":
          [ "new" ] },
      { "name": "option",
        "locations":
          [ { "lineno": 204,
              "filename": "PanelThumbnails.js" } ],
        "docs":
          { "summary": "An object representing a thumbnail selector option.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "label",
              "type": "string",
              "doc": "The option's label, displayed below the thumbnail" },
            { "name": "value",
              "type": "string",
              "doc": "The option's value, which is used in code" },
            { "name": "illustration",
              "type": "$w.PanelThumbnails.illustration",
              "doc": "The thumbnail illustration in SVG format" },
            { "type": "$w.PanelThumbnails.option" } ],
        "extra":
          {  },
        "labels":
          [ "new" ] } ],
  "extra":
    { "queryable": true } }
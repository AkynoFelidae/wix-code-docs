{ "name": "wix-window",
  "mixes": [],
  "labels":
    [ "new",
      "changed" ],
  "location":
    { "filename": "window.es6",
      "lineno": 16 },
  "docs":
    { "summary": "The wix-window module contains functionality that pertains to the\n current browser window.",
      "description":
        [ "To use the window module, import `wixWindow` from the `wix-window` module:",
          "",
          "   ``` javascript",
          "   import wixWindow from 'wix-window';",
          "   ```",
          "",
          " The APIs in `wix-window` can only be used in front-end code." ],
      "links": [],
      "examples": [] },
  "srcDocs":
    { "summary": "The wix-window module contains functionality that pertains to the\n current browser window.",
      "description":
        [ "To use the window module, import `wixWindow` from the `wix-window` module:",
          "",
          "   ``` javascript",
          "   import wixWindow from 'wix-window';",
          "   ```",
          "",
          " The APIs in `wix-window` can only be used in front-end code." ],
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "formFactor",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 142 } ],
        "docs":
          { "summary": "Gets what kind of device is being used to view the page.",
            "description":
              [ "The `formFactor` property gets either:",
                "",
                " + `\"Desktop\"` - When viewed in a desktop browser.",
                " + `\"Mobile\"`  - When viewed in a mobile browser." ],
            "links": [],
            "examples":
              [ { "title": "Get a device's form factor",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let formFactor = wixWindow.formFactor;  // \"Mobile\"" ] } ] },
        "srcDocs":
          { "summary": "Gets what kind of device is being used to view the page.",
            "description":
              [ "The `formFactor` property gets either:",
                "",
                " + `\"Desktop\"` - When viewed in a desktop browser.",
                " + `\"Mobile\"`  - When viewed in a mobile browser." ],
            "links": [],
            "examples":
              [ { "title": "Get a device's form factor",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let formFactor = wixWindow.formFactor;  // \"Mobile\"" ] } ] } },
      { "name": "locale",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 162 } ],
        "docs":
          { "summary": "Gets the locale of the current environment.",
            "description":
              [ "A locale, also known as an IETF language tag, is an abbreviated code",
                " that defines the user's language, country, and other aspects of the user",
                " interface such as number format and date format.",
                "",
                " Some common locales include:",
                " + `\"en\"` - English",
                " + `\"es\"` - Spanish",
                " + `\"de\"` - German",
                " + `\"ja\"` - Japanese",
                " + `\"fr\"` - French",
                " + `\"it\"` - Italian" ],
            "links": [],
            "examples":
              [ { "title": "Get an environment's locale",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let locale = wixWindow.locale;  // \"en\"" ] } ] },
        "srcDocs":
          { "summary": "Gets the locale of the current environment.",
            "description":
              [ "A locale, also known as an IETF language tag, is an abbreviated code",
                " that defines the user's language, country, and other aspects of the user",
                " interface such as number format and date format.",
                "",
                " Some common locales include:",
                " + `\"en\"` - English",
                " + `\"es\"` - Spanish",
                " + `\"de\"` - German",
                " + `\"ja\"` - Japanese",
                " + `\"fr\"` - French",
                " + `\"it\"` - Italian" ],
            "links": [],
            "examples":
              [ { "title": "Get an environment's locale",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let locale = wixWindow.locale;  // \"en\"" ] } ] } },
      { "name": "referrer",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 839 } ],
        "docs":
          { "summary": "Gets the HTTP referrer header field.",
            "description":
              [ "The `referrer` is the address of the previous web page that the user was",
                " on before arriving at the current page, typically by clicking a link." ],
            "links": [],
            "examples":
              [ { "title": "Get the referrer information",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let referrer = wixWindow.referrer;  // \"http://somesite.com\"" ] } ] },
        "srcDocs":
          { "summary": "Gets the HTTP referrer header field.",
            "description":
              [ "The `referrer` is the address of the previous web page that the user was",
                " on before arriving at the current page, typically by clicking a link." ],
            "links": [],
            "examples":
              [ { "title": "Get the referrer information",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let referrer = wixWindow.referrer;  // \"http://somesite.com\"" ] } ] } },
      { "name": "viewMode",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 122 } ],
        "docs":
          { "summary": "Gets which mode the site is currently being viewed in.",
            "description":
              [ "The `viewMode` property gets either:",
                "",
                " + `\"Preview\"` - When previewing the site using the **Preview** button in the Editor.",
                " + `\"Site\"` - When viewing the published site." ],
            "links": [],
            "examples":
              [ { "title": "Get a window's view mode",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let viewMode = wixWindow.viewMode;  // \"Site\"" ] } ] },
        "srcDocs":
          { "summary": "Gets which mode the site is currently being viewed in.",
            "description":
              [ "The `viewMode` property gets either:",
                "",
                " + `\"Preview\"` - When previewing the site using the **Preview** button in the Editor.",
                " + `\"Site\"` - When viewing the published site." ],
            "links": [],
            "examples":
              [ { "title": "Get a window's view mode",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let viewMode = wixWindow.viewMode;  // \"Site\"" ] } ] } } ],
  "operations":
    [ { "name": "getBoundingRect",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-window.WindowSizeInfo" ] },
            "doc": "undefined. on fulfilled - An object containing information about the window's size, the document's size, and the current scroll position.",
            "srcDoc": "on fulfilled - An object containing information about the window's size, the document's size, and the current scroll position." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 221 } ],
        "docs":
          { "summary": "Returns information about the window.",
            "description":
              [ "The `getBoundingRect()` function returns a Promise that resolves to an object",
                " containing information about the current window's size, the document's size,",
                " and the current scroll position." ],
            "links": [],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Returns information about the window.",
            "description":
              [ "The `getBoundingRect()` function returns a Promise that resolves to an object",
                " containing information about the current window's size, the document's size,",
                " and the current scroll position." ],
            "links": [],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ] } ] } },
      { "name": "getCurrentGeolocation",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The coordinates and timestamp of the current location.. on rejected - The user blocked the geolocation popup.",
            "srcDoc": "on fulfilled - The coordinates and timestamp of the current location.. on rejected - The user blocked the geolocation popup." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 359 } ],
        "docs":
          { "summary": "Returns the current geolocation of the user.",
            "description":
              [ "The `getCurrentGeolocation()` function returns a Promise that resolves to an",
                " object containing the current geolocation of the user.",
                "",
                " The object contains the following key:value pairs:",
                " + `\"timestamp\"` - The geolocation timestamp representing the date and time at which the location was retrieved.",
                " + `\"coords\"` - An object that defines the location.",
                "   + `\"latitude\"` - The position's latitude in decimal degrees.",
                "   + `\"longitude\"` - The position's longitude in decimal degrees.",
                "   + `\"altitude\"` - The position's altitude in metres, relative to sea level. This value may be null if the browser cannot provide the data.",
                "   + `\"accuracy\"` - The accuracy in meters of the latitude and longitude properties.",
                "   + `\"altitudeAccuracy\"` - The accuracy in meters of the altitude property. This value may be null.",
                "   + `\"heading\"` - The direction in degrees in which the device is traveling. It indicates how far off from heading true north the device is. If `speed` is `0`, the heading is `NaN`. This value may be null if the browser cannot provide the data.",
                "   + `\"speed\"` - The velocity in meters per second of the device. This value may be null if the browser cannot provide the data." ],
            "links": [],
            "examples":
              [ { "title": "Get the geolocation data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getCurrentGeolocation()",
                      "  .then( (obj) => {",
                      "    let timestamp = obj.timestamp;                  // 1495027186984",
                      "    let latitude = obj.coords.latitude;             // 32.0971036",
                      "    let longitude = obj.coords.longitude;           // 34.774391099999995",
                      "    let altitude = obj.coords.altitude;             // null",
                      "    let accuracy = obj.coords.accuracy;             // 29",
                      "    let altAccuracy = obj.coords.altitudeAccuracy;  // null",
                      "    let heading = obj.coords.heading;               // null",
                      "    let speed = obj.coords.speed;                   // null",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error;",
                      "  });" ] } ] },
        "srcDocs":
          { "summary": "Returns the current geolocation of the user.",
            "description":
              [ "The `getCurrentGeolocation()` function returns a Promise that resolves to an",
                " object containing the current geolocation of the user.",
                "",
                " The object contains the following key:value pairs:",
                " + `\"timestamp\"` - The geolocation timestamp representing the date and time at which the location was retrieved.",
                " + `\"coords\"` - An object that defines the location.",
                "   + `\"latitude\"` - The position's latitude in decimal degrees.",
                "   + `\"longitude\"` - The position's longitude in decimal degrees.",
                "   + `\"altitude\"` - The position's altitude in metres, relative to sea level. This value may be null if the browser cannot provide the data.",
                "   + `\"accuracy\"` - The accuracy in meters of the latitude and longitude properties.",
                "   + `\"altitudeAccuracy\"` - The accuracy in meters of the altitude property. This value may be null.",
                "   + `\"heading\"` - The direction in degrees in which the device is traveling. It indicates how far off from heading true north the device is. If `speed` is `0`, the heading is `NaN`. This value may be null if the browser cannot provide the data.",
                "   + `\"speed\"` - The velocity in meters per second of the device. This value may be null if the browser cannot provide the data." ],
            "links": [],
            "examples":
              [ { "title": "Get the geolocation data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getCurrentGeolocation()",
                      "  .then( (obj) => {",
                      "    let timestamp = obj.timestamp;                  // 1495027186984",
                      "    let latitude = obj.coords.latitude;             // 32.0971036",
                      "    let longitude = obj.coords.longitude;           // 34.774391099999995",
                      "    let altitude = obj.coords.altitude;             // null",
                      "    let accuracy = obj.coords.accuracy;             // 29",
                      "    let altAccuracy = obj.coords.altitudeAccuracy;  // null",
                      "    let heading = obj.coords.heading;               // null",
                      "    let speed = obj.coords.speed;                   // null",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error;",
                      "  });" ] } ] } },
      { "name": "getRouterData",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "Object",
            "doc": "The data returned by the router.",
            "srcDoc": "The data returned by the router." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 336 } ],
        "docs":
          { "summary": "Returns the data that a router passed to the page in its response.",
            "description":
              [ "When you create a router and define its functionality in its [router()](wix-router.html#router)",
                " function, you can choose to send data along with the router's [response](wix-router.WixRouterResponse.html).",
                " That data is retrieved in the code of the page that was routed to using the",
                " `getRouterData()` function.",
                "",
                " If you call the `getRouterData()` function from a non-router page or a router",
                " page that wasn't sent any data, the function returns `null`." ],
            "links":
              [ "[router( )](wix-router.html#router)",
                "[WixRouterResponse](wix-router.WixRouterResponse.html)" ],
            "examples":
              [ { "title": "Get the data passed by a router",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let routerData = wixWindow.getRouterData();" ] } ] },
        "srcDocs":
          { "summary": "Returns the data that a router passed to the page in its response.",
            "description":
              [ "When you create a router and define its functionality in its [router()](wix-router.html#router)",
                " function, you can choose to send data along with the router's [response](wix-router.WixRouterResponse.html).",
                " That data is retrieved in the code of the page that was routed to using the",
                " `getRouterData()` function.",
                "",
                " If you call the `getRouterData()` function from a non-router page or a router",
                " page that wasn't sent any data, the function returns `null`." ],
            "links":
              [ "[router( )](wix-router.html#router)",
                "[WixRouterResponse](wix-router.WixRouterResponse.html)" ],
            "examples":
              [ { "title": "Get the data passed by a router",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let routerData = wixWindow.getRouterData();" ] } ] } },
      { "name": "openLightbox",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "name",
              "type": "string",
              "doc": "The name of the lightbox to open.",
              "srcDoc": "The name of the lightbox to open." },
            { "name": "data",
              "type": "Object",
              "doc": "The data to pass to the lightbox.",
              "srcDoc": "The data to pass to the lightbox.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "undefined. on fulfilled - The returned data from the lightbox.. on rejected - The error that caused the rejection.",
            "srcDoc": "on fulfilled - The returned data from the lightbox.. on rejected - The error that caused the rejection." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 403 } ],
        "docs":
          { "summary": "Opens a lightbox and optionally passes it the given data.",
            "description":
              [ "The `openLightbox()` function returns a Promise which is resolved when the",
                " lightbox closes. If the lightbox is closed programmatically using its",
                " [`close()`](wix-window.lightbox.html#close) function, and the",
                " [`close()`](wix-window.lightbox.html#close) function was invoked",
                " with a data parameter, then the Promise resolves to that data object.",
                "",
                " If you send a data object to the lightbox, use the [`getContext()`](#getContext)",
                " function in the lightbox's code to access the received data." ],
            "links": [],
            "examples":
              [ { "title": "Open a lightbox",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\");" ] },
                { "title": "Open a lightbox and send it data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj);" ] },
                { "title": "Open a lightbox and receive data when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\")",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ] },
                { "title": "Open a lightbox, send it data, and receive data back when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj)",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "Opens a lightbox and optionally passes it the given data.",
            "description":
              [ "The `openLightbox()` function returns a Promise which is resolved when the",
                " lightbox closes. If the lightbox is closed programmatically using its",
                " [`close()`](wix-window.lightbox.html#close) function, and the",
                " [`close()`](wix-window.lightbox.html#close) function was invoked",
                " with a data parameter, then the Promise resolves to that data object.",
                "",
                " If you send a data object to the lightbox, use the [`getContext()`](#getContext)",
                " function in the lightbox's code to access the received data." ],
            "links": [],
            "examples":
              [ { "title": "Open a lightbox",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\");" ] },
                { "title": "Open a lightbox and send it data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj);" ] },
                { "title": "Open a lightbox and receive data when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\")",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ] },
                { "title": "Open a lightbox, send it data, and receive data back when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj)",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ] } ] } },
      { "name": "scrollBy",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "x",
              "type": "number",
              "doc": "The horizontal offset, in pixels, to scroll by.",
              "srcDoc": "The horizontal offset, in pixels, to scroll by." },
            { "name": "y",
              "type": "number",
              "doc": "The vertical offset, in pixels, to scroll by.",
              "srcDoc": "The vertical offset, in pixels, to scroll by." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "undefined. on fulfilled - When the scroll is complete.",
            "srcDoc": "on fulfilled - When the scroll is complete." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 294 } ],
        "docs":
          { "summary": "Scrolls the page by a given number of pixels.",
            "description":
              [ "The `scrollBy()` function returns a Promise that resolves when the current",
                " page has been scrolled by the given number of pixels,",
                "",
                " The `x` and `y` parameters determine the number of horizontal and vertical",
                " pixels to scroll the current page. Negative numbers scroll up or to the",
                " left and positive numbers scroll down or to the right." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page by a given number of pixels",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500);" ] },
                { "title": "Scroll the page by a given number of pixels and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ] } ] },
        "srcDocs":
          { "summary": "Scrolls the page by a given number of pixels.",
            "description":
              [ "The `scrollBy()` function returns a Promise that resolves when the current",
                " page has been scrolled by the given number of pixels,",
                "",
                " The `x` and `y` parameters determine the number of horizontal and vertical",
                " pixels to scroll the current page. Negative numbers scroll up or to the",
                " left and positive numbers scroll down or to the right." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page by a given number of pixels",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500);" ] },
                { "title": "Scroll the page by a given number of pixels and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ] } ] } },
      { "name": "scrollTo",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "x",
              "type": "number",
              "doc": "The horizontal position, in pixels, to scroll to.",
              "srcDoc": "The horizontal position, in pixels, to scroll to." },
            { "name": "y",
              "type": "number",
              "doc": "The vertical position, in pixels, to scroll to.",
              "srcDoc": "The vertical position, in pixels, to scroll to." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "undefined. on fulfilled - When the scroll is complete.",
            "srcDoc": "on fulfilled - When the scroll is complete." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 248 } ],
        "docs":
          { "summary": "Scrolls the page to a specific location.",
            "description":
              [ "The `scrollTo()` function returns a Promise that resolves when the current",
                " page has been scrolled to the given location.",
                "",
                " The `x` and `y` parameters determine the top-left pixel that will be",
                " displayed on screen after the scroll.",
                "",
                " To scroll to a specific element on the page, see the `$w.Node`",
                " [`scrollTo()`]($w.Node.html) function." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page to a location",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500);" ] },
                { "title": "Scroll the page to a location and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ] } ] },
        "srcDocs":
          { "summary": "Scrolls the page to a specific location.",
            "description":
              [ "The `scrollTo()` function returns a Promise that resolves when the current",
                " page has been scrolled to the given location.",
                "",
                " The `x` and `y` parameters determine the top-left pixel that will be",
                " displayed on screen after the scroll.",
                "",
                " To scroll to a specific element on the page, see the `$w.Node`",
                " [`scrollTo()`]($w.Node.html) function." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page to a location",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500);" ] },
                { "title": "Scroll the page to a location and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ] } ] } },
      { "name": "trackEvent",
        "labels":
          [ "new",
            "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "eventName",
              "type": "string",
              "doc": "The name of the event.",
              "srcDoc": "The name of the event." },
            { "name": "parameters",
              "type": "Object",
              "doc": "The event's parameters.",
              "srcDoc": "The event's parameters." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 458 } ],
        "docs":
          { "summary": "Placeholder XXX",
            "description":
              [ "The `trackEvent()` function ...XXX",
                "",
                " The following are the possible `TrackEvent` values with their associated",
                " `parameters`:",
                "",
                " + `\"AddProductImpression\"` - When a user views a product.",
                "    <code class=\"inline-code\"><b><a href=\"#contents\">contents</a></b>[{<a href=\"#id\">id</a>, <a href=\"#id\">sku</a>, <b><a href=\"#id\">name</a></b>, <a href=\"#id\">price</a>, <a href=\"#id\">currency</a>, <a href=\"#id\">category</a>, <a href=\"#id\">brand</a>, <a href=\"#id\">variant</a>, <a href=\"#id\">list</a>, <a href=\"#id\">position}</a>, ...]</code>",
                "    ```",
                "    import wixWindow from 'wix-window';",
                "",
                "    wixWindow.trackEvent('AddProductImpression', {",
                "         contents: [{",
                "           sku: 'P12345',",
                "           name: 'Really Fast Running Shoes',",
                "           category: 'Apparel/Shoes',",
                "           price: 100,",
                "           currency: 'USD',",
                "           brand: 'Nike',",
                "           variant: 'Black',",
                "           list: 'Search Results',",
                "           position: 1",
                "         }]",
                "    });",
                "    ```",
                "",
                " + `\"AddProductImpression\"` - When a user views a product.",
                "    <code class=\"inline-code\"><b><a href=\"#contents\">contents</a></b>[{<a href=\"#id\">id</a>, <a href=\"#id\">sku</a>, <b><a href=\"#id\">name</a></b>, <a href=\"#id\">price</a>, <a href=\"#id\">currency</a>, <a href=\"#id\">category</a>, <a href=\"#id\">brand</a>, <a href=\"#id\">variant</a>, <a href=\"#id\">list</a>, <a href=\"#id\">position}</a>, ...]</code>",
                "    ```",
                "    import wixWindow from 'wix-window';",
                "",
                "    wixWindow.trackEvent('AddProductImpression', {",
                "         contents: [{",
                "           sku: 'P12345',",
                "           name: 'Really Fast Running Shoes',",
                "           category: 'Apparel/Shoes',",
                "           price: 100,",
                "           currency: 'USD',",
                "           brand: 'Nike',",
                "           variant: 'Black',",
                "           list: 'Search Results',",
                "           position: 1",
                "         }]",
                "    });",
                "    ```",
                "",
                " + `\"AddPaymentInfo\"` - When a payment information is added in the checkout flow.",
                "   + Optional Parameters - `category`, `content_ids`, `contents`, `currency`, `option`, `price`",
                " + `\"AddToCart\"` - When a product is added to the shopping cart.",
                "   + Required Parameters - `name`",
                "   + Optional Parameters - `brand`, `category`, `content_ids`, `currency`, `id`, `name`, `position`, `price`, `type`, `variant`",
                " + `\"CustomEvent\"` - For events that are not covered by the standard events.",
                "   + Required Parameters - `event`",
                "   + Optional Parameters - custom parameters",
                " + `\"InitiateCheckout\"` - When a user begins the checkout flow, before completing it.",
                "   + Optional Parameters - `category`, `content_ids`, `contents`, `currency`, `name`, `num_items`, `price`, `type`",
                " + `\"Lead\"` - When a lead, such as clicking on pricing or signing up for a trial, is generated.",
                "   + Optional Parameters - `category`, `currency`, `name`, `price`",
                " + `\"Purchase\"` - When a purchase is made or the checkout flow is completed.",
                "   + Required Parameters - `price`, `currency`",
                "   + Optional Parameters - `affiliation`, `category`, `content_ids`, `contents`, `coupon`, `currency`, `id`, `name`, `num_items`, `price`, `revenue`, `shipping`, `tax`, `type`",
                " + `\"ViewContent\"` - When a page is viewed.",
                "   + Required Parameters - `name`",
                "   + Optional Parameters - `brand`, `category`, `content_ids`, `contents`, `currency`, `id`, `list`, `name`, `position`, `price`, `sku`, `type`, `variant`",
                "",
                "",
                " The following parameter keys are used in the `parameters` object:",
                " + <span id=\"affiliation\"><code class=\"inline-code\">affiliation</code> - String - Name of the store where the event occurred.</span>",
                " + <span id=\"brand\"><code>brand</code> - String - Brand of the product.</span>",
                " + <span id=\"category\"><code>category</code> - String - Category of the page or product.</span>",
                " + <span id=\"content_ids\"><code>content_ids</code> - Product IDs associated with the event.</span>",
                " + <span id=\"contents\"><code>contents</code> - Object[] - An array of JSON objects that contains the product IDs associated with the event as well as additional information. The JSON objects contain the following properties:</span>",
                "   + `id`",
                "   + `quantity`",
                "   + `item_price`",
                " + <span id=\"coupon\"><code>coupon</code> - Product coupon code.</span>",
                " + <span id=\"currency\"><code>currency</code> - Currency of the specified price.</span>",
                " + <span id=\"event\"><code>event</code> - Name of a custom event.</span>",
                " + <span id=\"id\"><code>id</code> - Product ID.</span>",
                " + <span id=\"list\"><code>list</code> - List or collection to which the product belongs.</span>",
                " + <span id=\"name\"><code>name</code> - Product name.</span>",
                " + <span id=\"option\"><code>option</code> - Additional field that can describe option information on a checkout page, such as selected payment method.</span>",
                " + <span id=\"position\"><code>position</code> - Product's position in a list or collection.</span>",
                " + <span id=\"price\"><code>price</code> - Product price.</span>",
                " + <span id=\"quantity\"><code>quantity</code> - Product quantity.</span>",
                " + <span id=\"revenue\"><code>revenue</code> - Total revenue or grand total associated with the event. This value may include shipping, tax costs, or other adjustments to total revenue that you want to include as part of your revenue calculations. Note: if `revenue` is not set, its value will be automatically calculated using the product `quantity` and `price` fields of all products in the event.</span>",
                " + <span id=\"shipping\"><code>shipping</code> - Total shipping cost in provided `currency`.</span>",
                " + <span id=\"sku\"><code>sku</code> - Stock keeping unit code.</span>",
                " + <span id=\"step\"><code>step</code> - Number representing a step in the checkout process.</span>",
                " + <span id=\"tax\"><code>tax</code> - Total tax in provided `currency`.</span>",
                " + <span id=\"type\"><code>type</code> - Either \"product\" or \"product_group\", depending on the `content_ids` or `contents` being passed.</span>",
                "   + If the IDs being passed in the `content_ids` or `contents` parameters are IDs of products, then the value should be \"product\".</span>",
                "   + If the IDs being passed in the `content_ids` or `contents` parameters are IDs of product groups, then the value should be \"product_group\".</span>",
                " + <span id=\"variant\"><code>variant</code> - The variant of the product.</span>" ],
            "links": [],
            "examples": [] },
        "srcDocs":
          { "summary": "Sends a tracking event to external analytics tools.",
            "description":
              [ "The `trackEvent()` function sends an event to analytics tools connected",
                " to your site. It can send events to Google Analytics and Facebook Pixel.",
                " To learn how to connect analytics tools to your site, see",
                " [About Tracking Tools & Analytics](https://support.wix.com/en/article/about-tracking-tools-analytics).",
                "",
                " Listed below are:",
                "  + The possible `eventName` values. Note, that although the events refer",
                "    to \"products\", any important item you want to track can be considered",
                "    a \"product\".",
                "  + Each event's required and optional `parameters` along with an example",
                "    function call. Required parameters appear in bold.",
                "  + All the possible parameters, their types, and a description of",
                "    their usual usage.",
                "",
                "",
                " **Event Names**",
                "",
                " + [`\"AddProductImpression\"`](#AddProductImpression) - When a user views a product.",
                " + [`\"ClickProduct\"`](#ClickProduct) - When a user clicks on a product.",
                " + [`\"ViewContent\"`](#ViewContent) - When a key page is viewed.",
                " + [`\"AddToCart\"`](#AddToCart) - When a user adds a product to the shopping cart.",
                " + [`\"RemoveFromCart\"`](#RemoveFromCart) - When a user removes a product from the shopping cart.",
                " + [`\"InitiateCheckout\"`](#InitiateCheckout) - When a user starts the checkout process.",
                " + [`\"AddPaymentInfo\"`](#AddPaymentInfo) - When a user saves payment information.",
                " + [`\"Purchase\"`](#Purchase) - When the checkout process is complete.",
                " + [`\"Lead\"`](#Lead) - When a user subscribes to a newsletter or submits a contact form.",
                " + [`\"CustomEvent\"`](#CustomEvent) - When a user performs an event not listed above.",
                "",
                "",
                " **Event Details**",
                "",
                " <h3 id=\"AddProductImpression\">AddProductImpression</h3>",
                " When a user views a product.",
                "",
                " <code class=\"inline-code\"><b><a href=\"#contents\">contents</a></b>[{<a href=\"#id\">id</a>, <a href=\"#sku\">sku</a>, <b><a href=\"#name\">name</a></b>, <a href=\"#price\">price</a>, <a href=\"#currency\">currency</a>, <a href=\"#category\">category</a>, <a href=\"#brand\">brand</a>, <a href=\"#variant\">variant</a>, <a href=\"#list\">list</a>, <a href=\"#position\">position}</a>]</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"AddProductImpression\", {",
                "      contents: [{",
                "        sku: \"P12345\",",
                "        name: \"Really Fast Running Shoes\",",
                "        category: \"Apparel/Shoes\",",
                "        price: 100,",
                "        currency: \"USD\",",
                "        brand: \"Nike\",",
                "        variant: \"Black\",",
                "        list: \"Search Results\",",
                "        position: 1",
                "      }, {",
                "        sku: \"P67890\",",
                "        name: \"Running Shirt\",",
                "        category: \"Apparel/Shirts\",",
                "        price: 50,",
                "        currency: \"USD\",",
                "        brand: \"Nike\",",
                "        variant: \"Blue\",",
                "        list: \"Search Results\",",
                "        position: 2",
                "      }]",
                "  });",
                "  ```",
                "",
                " <h3 id=\"ClickProduct\">ClickProduct</h3>",
                " When a user clicks on a product or item.",
                "",
                " <code class=\"inline-code\">{<a href=\"#id\">id</a>, <a href=\"#sku\">sku</a>, <b><a href=\"#name\">name</a></b>, <a href=\"#price\">price</a>, <a href=\"#currency\">currency</a>, <a href=\"#category\">category</a>, <a href=\"#brand\">brand</a>, <a href=\"#variant\">variant</a>, <a href=\"#list\">list</a>, <a href=\"#position\">position</a>}</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"ClickProduct\", {",
                "      id: \"P12345\",",
                "      name: \"Really Fast Running Shoes\",",
                "      category: \"Apparel/Shoes\",",
                "      price: 120,",
                "      currency: \"USD\",",
                "      brand: \"Adidas\",",
                "      variant: \"Black\",",
                "      position: 1",
                "  });",
                "  ```",
                "",
                " <h3 id=\"ViewContent\">ViewContent</h3>",
                " When a user views a key page.",
                "",
                " <code class=\"inline-code\">{<a href=\"#id\">id</a>, <a href=\"#sku\">sku</a>, <b><a href=\"#name\">name</a></b>, <a href=\"#price\">price</a>, <a href=\"#currency\">currency</a>, <a href=\"#category\">category</a>, <a href=\"#brand\">brand</a>, <a href=\"#variant\">variant</a>, <a href=\"#list\">list</a>, <a href=\"#position\">position</a>}</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"ViewContent\", {",
                "      id: \"P12345\",",
                "      name: \"Really Fast Running Shoes\",",
                "      category: \"Apparel/Shoes\",",
                "      price: 120,",
                "      currency: \"USD\",",
                "      brand: \"Adidas\",",
                "      variant: \"Black\",",
                "      position: 1",
                "  });",
                "  ```",
                "",
                " <h3 id=\"AddToCart\">AddToCart</h3>",
                " When a user adds a product to the shopping cart.",
                "",
                " <code class=\"inline-code\">{<a href=\"#id\">id</a>, <a href=\"#sku\">sku</a>, <b><a href=\"#name\">name</a></b>, <a href=\"#price\">price</a>, <a href=\"#currency\">currency</a>, <a href=\"#category\">category</a>, <a href=\"#brand\">brand</a>, <a href=\"#variant\">variant</a>, <a href=\"#position\">position, <a href=\"#quantity\">quantity</a>}</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"AddToCart\", {",
                "      id: \"P12345\",",
                "      name: \"Really Fast Running Shoes\",",
                "      category: \"Apparel/Shoes\",",
                "      price: 120.5,",
                "      currency: \"USD\",",
                "      brand: \"Saucony\",",
                "      variant: \"Silver\",",
                "      position: 2,",
                "      quantity: 1",
                "  });",
                "  ```",
                "",
                " <h3 id=\"RemoveFromCart\">RemoveFromCart</h3>",
                " When a user removes a product from the shopping cart.",
                "",
                " <code class=\"inline-code\">{<a href=\"#id\">id</a>, <b><a href=\"#name\">name</a></b>, <a href=\"#price\">price</a>, <a href=\"#currency\">currency</a>, <a href=\"#category\">category</a>, <a href=\"#brand\">brand</a>, <a href=\"#variant\">variant</a>, <a href=\"#position\">position, <a href=\"#quantity\">quantity</a>}</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"RemoveFromCart\", {",
                "      id: \"P12346\",",
                "      name: \"Really Fast Running Shoes\",",
                "      price: 125.95,",
                "      currency: \"USD\",",
                "      category: \"Apparel/Shoes\",",
                "      brand: \"Adidas\",",
                "      variant: \"Black\",",
                "      position: 1,",
                "      quantity: 1",
                " });",
                "  ```",
                "",
                " <h3 id=\"InitiateCheckout\">InitiateCheckout</h3>",
                " When a user starts the checkout process.",
                "",
                " <code class=\"inline-code\"><b>contents</b>[{<a href=\"#id\">id</a>, <a href=\"#sku\">sku</a>, <b><a href=\"#name\">name</a></b>, <a href=\"#price\">price</a>, <a href=\"#currency\">currency</a>, <a href=\"#category\">category</a>, <a href=\"#brand\">brand</a>, <a href=\"#variant\">variant</a>, <a href=\"#quantity\">quantity</a>}]</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"InitiateCheckout\", {",
                "      contents: [{",
                "          sku: \"P12345\",",
                "          name: \"Really Fast Running Shoes\",",
                "          category: \"Apparel/Shoes\",",
                "          price: 100,",
                "          currency: \"USD\",",
                "          brand: \"Nike\",",
                "          variant: \"Black\",",
                "          quantity: 2",
                "      }, {",
                "          sku: \"P67890\",",
                "          name: \"Running Shirt\",",
                "          category: \"Apparel/Shirts\",",
                "          price: 50,",
                "          currency: \"USD\",",
                "          brand: \"Nike\",",
                "          variant: \"Blue\",",
                "          quantity: 3",
                "      }]",
                " });",
                "  ```",
                "",
                " <h3 id=\"AddPaymentInfo\">AddPaymentInfo</h3>",
                " When a user saves payment information.",
                "",
                " <code class=\"inline-code\">{<a href=\"#option\">option</a>}</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"AddPaymentInfo\", {",
                "      option: \"Visa\"",
                "  });",
                "  ```",
                "",
                " <h3 id=\"Purchase\">Purchase</h3>",
                " When the checkout process is complete.",
                "",
                " <code class=\"inline-code\">{<b><a href=\"#id\">id</a></b>, <a href=\"#affiliation\">affiliation</a>, <a href=\"#revenue\">revenue</a>, <a href=\"#tax\">tax</a>, <a href=\"#shipping\">shipping</a>, <a href=\"#coupon\">coupon</a>, <b><a href=\"#contents\">contents</a></b>[{<a href=\"#id\">id</a>, <b><a href=\"#name\">name</a></b>, <a href=\"#price\">price</a>, <a href=\"#currency\">currency</a>, <a href=\"#category\">category</a>, <a href=\"#brand\">brand</a>, <a href=\"#variant\">variant</a>, <a href=\"#quantity\">quantity</a>}]}</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"Purchase\", {",
                "      id: \"T12345\",",
                "      affiliation: \"My Store\",",
                "      revenue: 22.16,",
                "      tax: 2.85,",
                "      shipping: 5.34,",
                "      coupon: \"SUMMER2018\",",
                "      contents: [{",
                "          id: \"ABC123\",",
                "          quantity: 2,",
                "          price: 1.99,",
                "          currency: \"USD\"",
                "      }, {",
                "          id: \"XYZ789\",",
                "          quantity: 1,",
                "          price: 9.99,",
                "          currency: \"USD\"",
                "      }]",
                "  });",
                "  ```",
                "",
                " <h3 id=\"Lead\">Lead</h3>",
                " When a user subscribes to a newsletter or submits a contact form.",
                "",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"Lead\");",
                "  ```",
                "",
                "  <h3 id=\"CustomEvent\">CustomEvent</h3>",
                "  When a user performs an event not listed above.",
                "",
                "  <code class=\"inline-code\">{<b><a href=\"#event\">event</a></b>, *}</code>",
                "  ```",
                "  import wixWindow from 'wix-window';",
                "",
                "  wixWindow.trackEvent(\"CustomEvent\", {",
                "      event: \"FrequentShopper\",",
                "      num_purchases: 8,",
                "      average_order: 245.24,",
                "      favorite_category: \"Sporting Goods\"",
                "  });",
                "  ```",
                "",
                " **Event Parameters**",
                "",
                " The following parameter keys are used in the `parameters` object:",
                " + <span id=\"affiliation\"><code class=\"inline-code\">affiliation</code> - String - Name of the store where the event occurred.</span>",
                " + <span id=\"brand\"><code class=\"inline-code\">brand</code> - String - Brand name of the product.</span>",
                " + <span id=\"category\"><code class=\"inline-code\">category</code> - String - Category of the page or product.</span>",
                " + <span id=\"contents\"><code class=\"inline-code\">contents</code> - Object[] - Additional product information.</span>",
                " + <span id=\"coupon\"><code class=\"inline-code\">coupon</code> - String - Coupon code applied to the transaction.</span>",
                " + <span id=\"currency\"><code class=\"inline-code\">currency</code> - String - Currency code.</span>",
                " + <span id=\"event\"><code class=\"inline-code\">event</code> - String - Name of a custom event.</span>",
                " + <span id=\"id\"><code class=\"inline-code\">id</code> - String - Product ID.</span>",
                " + <span id=\"list\"><code class=\"inline-code\">list</code> - String - List or collection the product is in.</span>",
                " + <span id=\"name\"><code class=\"inline-code\">name</code> - String - Product name.</span>",
                " + <span id=\"option\"><code class=\"inline-code\">option</code> - String - Additional field that can describe option information on a checkout page, such as selected payment method.</span>",
                " + <span id=\"position\"><code class=\"inline-code\">position</code> - Number - Product's position in a list or collection.</span>",
                " + <span id=\"price\"><code class=\"inline-code\">price</code> - Number - Product price.</span>",
                " + <span id=\"quantity\"><code class=\"inline-code\">quantity</code> - Number - Product quantity.</span>",
                " + <span id=\"revenue\"><code class=\"inline-code\">revenue</code> - Number - Total amount of the purchase including shipping, taxes, etc.</span>",
                " + <span id=\"shipping\"><code class=\"inline-code\">shipping</code> - Number - Total shipping charge.</span>",
                " + <span id=\"sku\"><code class=\"inline-code\">sku</code> - String - Stock keeping unit code.</span>",
                " + <span id=\"tax\"><code class=\"inline-code\">tax</code> - Number - Total tax charge.</span>",
                " + <span id=\"variant\"><code class=\"inline-code\">variant</code> - Variant of the product.</span>" ],
            "links": [],
            "examples": [] } } ],
  "callbacks": [],
  "messages":
    [ { "name": "WindowSizeInfo",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 178 } ],
        "docs":
          { "summary": "An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.",
            "links":
              [ "[getBoundingRect( )](#getBoundingRect)" ],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ] } ] },
        "srcDocs":
          { "summary": "An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.",
            "links":
              [ "[getBoundingRect( )](#getBoundingRect)" ],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ] } ] },
        "members":
          [ { "name": "window",
              "type": "Object",
              "docs": "An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window.",
              "srcDocs": "An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window." },
            { "name": "document",
              "type": "Object",
              "docs": "An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window.",
              "srcDocs": "An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window." },
            { "name": "scroll",
              "type": "Object",
              "docs": "An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner.",
              "srcDocs": "An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner." } ],
        "labels": [] } ] }
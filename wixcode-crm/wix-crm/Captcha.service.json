{ "name": "Captcha",
  "memberOf": "wix-crm",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "index.js" },
  "docs":
    { "summary": "The CAPTCHA API is used to display a modal that presents a challenge-response test to determine whether a \nsite visitor is a human or a bot.",
      "description":
        [ "Use a CAPTCHA challenge-response test to verify that site visitors are human before allowing them to perform",
          " restricted operations.",
          "",
          " To use the CAPTCHA API, import `wixCaptcha` from the `wix-crm` module:",
          "",
          "   ```javascript",
          "   import wixCaptcha from 'wix-crm';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "openCaptchaModal",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-crm.Captcha.Token" ] },
            "doc": "Fulfilled - The CAPTCHA token to authorize." },
        "locations":
          [ { "lineno": 1,
              "filename": "openCaptchaModal.js" } ],
        "docs":
          { "summary": "Opens a modal that contains a CAPTCHA challenge.",
            "description":
              [ "A modal window displays a CAPTCHA challenge. A `token` is created when the visitor completes the challenge. ",
                " That token is then verified and, if it passes [authorization](https://www.wix.com/velo/reference/wix-captcha-backend/authorize), ",
                " the restricted access will be permitted to that visitor. ",
                " If two minutes pass without authorization, the token expires and the CAPTCHA modal is reset.",
                " ",
                " > **Note:**",
                " To ensure complete protection, you must include backend [authorization](https://www.wix.com/velo/reference/wix-captcha-backend/authorize) ",
                " as a mandatory step of the CAPTCHA validation lifecycle.",
                "",
                " ### Use `openCaptchaModal()` or [Captcha](https://www.wix.com/velo/reference/$w/captcha/introduction) in Wix Editor Elements",
                " Using `openCaptchaModal()` requires fewer lines of code and takes up less space on your site page. ",
                " If you prefer to have more control over the CAPTCHA element on your page, see the CAPTCHA element [here](https://www.wix.com/velo/reference/$w/captcha).",
                "",
                " ### Typical CAPTCHA Modal Lifecycle",
                " ",
                " The following list outlines the steps taken in a typical CAPTCHA modal lifecycle:",
                "",
                "1. An element is hidden, pending CAPTCHA verification.",
                "1. A site visitor completes the CAPTCHA challenge which generates a token.",
                "1. The token is verified using a backend function and the hidden element is now shown." ],
            "links": [],
            "examples":
              [ { "title": "Full CAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * Backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptchaBackend from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptchaBackend.authorize(submitRequestData.token)",
                      "    .then(() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data)",
                      "        .then(() => ({ \"type\": \"success\" }))",
                      "        .catch((error) => ({ \"type\": \"insertion error\", \"message\": \"Error: collection insertion failed: \" + error }));",
                      "    })",
                      "    .catch((error) => ({ \"type\": \"authorization error\", \"message\": \"Error: CAPTCHA authorization failed: \" + error }));",
                      "}",
                      "",
                      "/********************",
                      " * Client-side code *",
                      " ********************/",
                      "",
                      "import { processSubmission } from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() => {",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then((response) => {",
                      "        // Display a different message depending on response from backend function",
                      "        switch (response.type) {",
                      "          case \"success\":",
                      "            $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "            break;",
                      "          case \"authorization error\":",
                      "            $w(\"#messageText\").text = \"CAPTCHA authorization failed. Redo the CAPTCHA challenge.\";",
                      "            break;",
                      "          case \"insertion error\":",
                      "            $w(\"#messageText\").text = \"Database error. Redo the CAPTCHA challenge.\";",
                      "            break;",
                      "        }",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").show();",
                      "      });",
                      "  });",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"The reCAPTCHA element lost connection with the CAPTCHA provider. Try again later.\";",
                      "    $w(\"#messageText\").show()",
                      "      .then(() => {",
                      "        $w(\"#messageText\").hide(\"fade\", { \"delay\": 10000 });",
                      "      });",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "    $w(\"#messageText\").text = \"The CAPTCHA has timed out. Please redo the CAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the CAPTCHA is verified and a token is\n generated. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Token",
        "locations":
          [ { "lineno": 41,
              "filename": "openCaptchaModal.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "token",
              "type": "string",
              "doc": "The CAPTCHA token to authorize." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }